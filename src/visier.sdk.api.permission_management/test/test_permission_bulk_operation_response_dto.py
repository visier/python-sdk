# coding: utf-8

"""
    Visier Permission Management APIs

    Visier APIs for managing permissions within an organization

    The version of the OpenAPI document: 22222222.99201.1411
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from visier.sdk.api.permission_management.models.permission_bulk_operation_response_dto import PermissionBulkOperationResponseDTO

class TestPermissionBulkOperationResponseDTO(unittest.TestCase):
    """PermissionBulkOperationResponseDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PermissionBulkOperationResponseDTO:
        """Test PermissionBulkOperationResponseDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PermissionBulkOperationResponseDTO`
        """
        model = PermissionBulkOperationResponseDTO()
        if include_optional:
            return PermissionBulkOperationResponseDTO(
                failures = [
                    visier.sdk.api.permission_management.models.permission_failure_dto.PermissionFailureDTO(
                        display_name = '', 
                        error = null, 
                        permission_id = '', )
                    ],
                successes = [
                    visier.sdk.api.permission_management.models.permission_success_dto.PermissionSuccessDTO(
                        display_name = '', 
                        permission_id = '', )
                    ]
            )
        else:
            return PermissionBulkOperationResponseDTO(
        )
        """

    def testPermissionBulkOperationResponseDTO(self):
        """Test PermissionBulkOperationResponseDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
