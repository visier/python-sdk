# coding: utf-8

"""
    Visier Data Out APIs

    Visier APIs for getting data out of Visier, such as aggregate data and data version information.

    The version of the OpenAPI document: 22222222.99201.1429
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from visier.sdk.api.data_out.models.vee_feedback_dto import VeeFeedbackDTO

class TestVeeFeedbackDTO(unittest.TestCase):
    """VeeFeedbackDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> VeeFeedbackDTO:
        """Test VeeFeedbackDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `VeeFeedbackDTO`
        """
        model = VeeFeedbackDTO()
        if include_optional:
            return VeeFeedbackDTO(
                description = '',
                is_approved = True,
                response = visier.sdk.api.data_out.models.vee_response_dto.VeeResponseDTO(
                    chart_url = '', 
                    corrections = visier.sdk.api.data_out.models.vee_query_corrections_dto.VeeQueryCorrectionsDTO(
                        clarifications = [
                            visier.sdk.api.data_out.models.query_clarification_dto.QueryClarificationDTO(
                                message = '', )
                            ], 
                        warning = [
                            'VEE_NO_WARNING'
                            ], ), 
                    data = visier.sdk.api.data_out.models.vee_data_dto.VeeDataDTO(
                        context = '', 
                        data_json = '', ), 
                    narrative = '', 
                    reworded_question = '', 
                    schema = visier.sdk.api.data_out.models.vee_response_schema_dto.VeeResponseSchemaDTO(
                        concepts = [
                            visier.sdk.api.data_out.models.vee_response_schema_reference_dto.VeeResponseSchemaReferenceDTO(
                                name = '', 
                                paths = [
                                    ''
                                    ], )
                            ], 
                        dimensions = [
                            visier.sdk.api.data_out.models.vee_response_schema_reference_dto.VeeResponseSchemaReferenceDTO(
                                name = '', )
                            ], 
                        metrics = [
                            ''
                            ], ), 
                    status_code = visier.sdk.api.data_out.models.vee_status_code_dto.VeeStatusCodeDTO(
                        status_msg = '', ), 
                    thread_state = visier.sdk.api.data_out.models.vee_thread_state_dto.VeeThreadStateDTO(
                        question_state = [
                            ''
                            ], ), 
                    visual = visier.sdk.api.data_out.models.vee_visual_dto.VeeVisualDTO(
                        context = '', 
                        image = '', ), )
            )
        else:
            return VeeFeedbackDTO(
        )
        """

    def testVeeFeedbackDTO(self):
        """Test VeeFeedbackDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
