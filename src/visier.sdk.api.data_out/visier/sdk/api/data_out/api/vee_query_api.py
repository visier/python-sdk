# coding: utf-8

"""
    Visier Data Out APIs

    Visier APIs for getting data out of Visier, such as aggregate data and data version information.

    The version of the OpenAPI document: 22222222.99201.1436
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import StrictBool, StrictInt, StrictStr, field_validator
from typing import List, Optional
from visier.sdk.api.data_out.models.vee_feedback_dto import VeeFeedbackDTO
from visier.sdk.api.data_out.models.vee_response_dto import VeeResponseDTO
from visier.sdk.api.data_out.models.vee_sample_question_library_dto import VeeSampleQuestionLibraryDTO

from visier.sdk.api.data_out.api_client import ApiClient, RequestSerialized
from visier.sdk.api.data_out.api_response import ApiResponse
from visier.sdk.api.data_out.rest import RESTResponseType


class VeeQueryApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def vee_query_feedback(
        self,
        question: Optional[StrictStr] = None,
        thread_state_question_state: Optional[List[StrictStr]] = None,
        options_include_visual: Optional[StrictBool] = None,
        options_chart_options_width: Optional[StrictInt] = None,
        options_chart_options_height: Optional[StrictInt] = None,
        options_include_data: Optional[StrictBool] = None,
        options_data_format: Optional[StrictStr] = None,
        options_include_reworded_question: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VeeFeedbackDTO:
        """Submit Vee feedback

        Give Vee feedback on a previous response. POST the JSON response returned from `query` endpoint above,  along with a positive or negative rating (`isApproved`) and any further information you'd like to provide (`description`).   Example: `POST /v1alpha/rest/vee/query-feedback` returns a success or failure:  ```json  {      \"response\": { (valueof_json_response_from_query_endpoint) },      \"isApproved\": \"false\",      \"description\": \"I wanted to see more orgs in the answer!\"  }  ```  <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>

        :param question:
        :type question: str
        :param thread_state_question_state:
        :type thread_state_question_state: List[str]
        :param options_include_visual:
        :type options_include_visual: bool
        :param options_chart_options_width:
        :type options_chart_options_width: int
        :param options_chart_options_height:
        :type options_chart_options_height: int
        :param options_include_data:
        :type options_include_data: bool
        :param options_data_format:
        :type options_data_format: str
        :param options_include_reworded_question:
        :type options_include_reworded_question: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._vee_query_feedback_serialize(
            question=question,
            thread_state_question_state=thread_state_question_state,
            options_include_visual=options_include_visual,
            options_chart_options_width=options_chart_options_width,
            options_chart_options_height=options_chart_options_height,
            options_include_data=options_include_data,
            options_data_format=options_data_format,
            options_include_reworded_question=options_include_reworded_question,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VeeFeedbackDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def vee_query_feedback_with_http_info(
        self,
        question: Optional[StrictStr] = None,
        thread_state_question_state: Optional[List[StrictStr]] = None,
        options_include_visual: Optional[StrictBool] = None,
        options_chart_options_width: Optional[StrictInt] = None,
        options_chart_options_height: Optional[StrictInt] = None,
        options_include_data: Optional[StrictBool] = None,
        options_data_format: Optional[StrictStr] = None,
        options_include_reworded_question: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VeeFeedbackDTO]:
        """Submit Vee feedback

        Give Vee feedback on a previous response. POST the JSON response returned from `query` endpoint above,  along with a positive or negative rating (`isApproved`) and any further information you'd like to provide (`description`).   Example: `POST /v1alpha/rest/vee/query-feedback` returns a success or failure:  ```json  {      \"response\": { (valueof_json_response_from_query_endpoint) },      \"isApproved\": \"false\",      \"description\": \"I wanted to see more orgs in the answer!\"  }  ```  <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>

        :param question:
        :type question: str
        :param thread_state_question_state:
        :type thread_state_question_state: List[str]
        :param options_include_visual:
        :type options_include_visual: bool
        :param options_chart_options_width:
        :type options_chart_options_width: int
        :param options_chart_options_height:
        :type options_chart_options_height: int
        :param options_include_data:
        :type options_include_data: bool
        :param options_data_format:
        :type options_data_format: str
        :param options_include_reworded_question:
        :type options_include_reworded_question: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._vee_query_feedback_serialize(
            question=question,
            thread_state_question_state=thread_state_question_state,
            options_include_visual=options_include_visual,
            options_chart_options_width=options_chart_options_width,
            options_chart_options_height=options_chart_options_height,
            options_include_data=options_include_data,
            options_data_format=options_data_format,
            options_include_reworded_question=options_include_reworded_question,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VeeFeedbackDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def vee_query_feedback_without_preload_content(
        self,
        question: Optional[StrictStr] = None,
        thread_state_question_state: Optional[List[StrictStr]] = None,
        options_include_visual: Optional[StrictBool] = None,
        options_chart_options_width: Optional[StrictInt] = None,
        options_chart_options_height: Optional[StrictInt] = None,
        options_include_data: Optional[StrictBool] = None,
        options_data_format: Optional[StrictStr] = None,
        options_include_reworded_question: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Submit Vee feedback

        Give Vee feedback on a previous response. POST the JSON response returned from `query` endpoint above,  along with a positive or negative rating (`isApproved`) and any further information you'd like to provide (`description`).   Example: `POST /v1alpha/rest/vee/query-feedback` returns a success or failure:  ```json  {      \"response\": { (valueof_json_response_from_query_endpoint) },      \"isApproved\": \"false\",      \"description\": \"I wanted to see more orgs in the answer!\"  }  ```  <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>

        :param question:
        :type question: str
        :param thread_state_question_state:
        :type thread_state_question_state: List[str]
        :param options_include_visual:
        :type options_include_visual: bool
        :param options_chart_options_width:
        :type options_chart_options_width: int
        :param options_chart_options_height:
        :type options_chart_options_height: int
        :param options_include_data:
        :type options_include_data: bool
        :param options_data_format:
        :type options_data_format: str
        :param options_include_reworded_question:
        :type options_include_reworded_question: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._vee_query_feedback_serialize(
            question=question,
            thread_state_question_state=thread_state_question_state,
            options_include_visual=options_include_visual,
            options_chart_options_width=options_chart_options_width,
            options_chart_options_height=options_chart_options_height,
            options_include_data=options_include_data,
            options_data_format=options_data_format,
            options_include_reworded_question=options_include_reworded_question,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VeeFeedbackDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _vee_query_feedback_serialize(
        self,
        question,
        thread_state_question_state,
        options_include_visual,
        options_chart_options_width,
        options_chart_options_height,
        options_include_data,
        options_data_format,
        options_include_reworded_question,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'threadState.questionState': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if question is not None:
            
            _query_params.append(('question', question))
            
        if thread_state_question_state is not None:
            
            _query_params.append(('threadState.questionState', thread_state_question_state))
            
        if options_include_visual is not None:
            
            _query_params.append(('options.includeVisual', options_include_visual))
            
        if options_chart_options_width is not None:
            
            _query_params.append(('options.chartOptions.width', options_chart_options_width))
            
        if options_chart_options_height is not None:
            
            _query_params.append(('options.chartOptions.height', options_chart_options_height))
            
        if options_include_data is not None:
            
            _query_params.append(('options.includeData', options_include_data))
            
        if options_data_format is not None:
            
            _query_params.append(('options.dataFormat', options_data_format))
            
        if options_include_reworded_question is not None:
            
            _query_params.append(('options.includeRewordedQuestion', options_include_reworded_question))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'CookieAuth', 
            'ApiKeyAuth', 
            'OAuth2Auth', 
            'OAuth2Auth', 
            'BearerAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1alpha/rest/vee/query-feedback',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def vee_query_request(
        self,
        question: Optional[StrictStr] = None,
        thread_state_question_state: Optional[List[StrictStr]] = None,
        options_include_visual: Optional[StrictBool] = None,
        options_chart_options_width: Optional[StrictInt] = None,
        options_chart_options_height: Optional[StrictInt] = None,
        options_include_data: Optional[StrictBool] = None,
        options_data_format: Optional[StrictStr] = None,
        options_include_reworded_question: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VeeResponseDTO:
        """Ask Vee a question

        Use this API to ask Vee a People Analytic question and receive a response.  Options `includeData` and `includeVisual` can be set in the request data to receive additional data corresponding to the answer.   [ Example 1 ] initiating a conversation with Vee: `POST v1alpha/rest/vee/query` with body data  ```json  {      \"question\": \"what is the headcount by gender in each org?\",      \"options\": {          \"includeVisual\": \"true\",          \"includeData\": \"true\",          \"rewordedQuestion\": \"true\"      }  }  ```  returns  ```json  {     \"threadState\": {         \"questionState\": [             \"(encrypted threadState string)\"         ]     },     \"statusCode\": {         \"statusCode\": \"VEE_API_SUCCESS\",         \"statusMsg\": \"Successful Vee response for question=what is the headcount by gender in each org?\"     },     \"narrative\": \"In Apr 2024, the Headcount: for Man & Operations was the largest at 165 (16.1% of total) and for Woman & BlueSphere was the smallest at 1 (0.1% of total).\",     \"chartUrl\": \"http://(vanity).visier.com/hr/prod/appcontainer#/analytics/queryFnChart?fn=(chartPath)\",     \"schema\": {         \"metrics\": [             \"Headcount\"         ],         \"dimensions\": [             {                 \"name\": \"Organization\"             },             {                 \"name\": \"Gender\"             },             {                 \"name\": \"Gender\",                 \"paths\": [                     \"Employee\"                 ]             },             {                 \"name\": \"Organization\",                 \"paths\": [                     \"Employee\"                 ]             }         ]     },     \"data\": {         \"dataJson\": \"(hidden for length)\",         \"context\": \"{\\\"filters\\\":[],\\\"timeFilter\\\":[\\\"Apr 2024\\\"]}\"   ,     \"visual\": {         \"image\": \"(base64 encoded PNG of rasterized chart)\"         \"title\": \"Trend of Average Hourly Rate by Gender\",         \"context\": \"{\\\"filters\\\":[],\\\"timeFilter\\\":[\\\"Apr 2024\\\"]}\"     },     \"rewordedQuestion\": \"What is the gender breakdown of our workforce by organization this month?\"  }  ```   [ Example 2 ] Asking Vee a followup question: `POST v1alpha/rest/vee/query` with body data:  ```json  {     \"question\": \"what about by tenure?\",     \"threadState\": {         \"questionState\": [             \"(valueof_questionState_from_Example_1_above)\"         ]     },     \"options\": {         \"includeVisual\": \"false\",         \"includeData\": \"true\",         \"rewordedQuestion\": \"false\"     }  }  ````  returns  ```json  {     \"threadState\": {         \"questionState\": [             \"(valueof_questionState_from_Example_1_above)\",             \"(new encrypted threadState string)\"         ]     },     \"statusCode\": {         \"statusCode\": \"VEE_API_SUCCESS\",         \"statusMsg\": \"Successful Vee response for question=what about by tenure?\"     },     \"narrative\": \"In Apr 2024, the Headcount by Tenure Range were: 0 to 1 yr was 205 (20% of total), 1 to 2 yrs was 121 (11.8% of total) and 2 to 3 yrs was 91 (8.86% of total)and 4 more.\",     \"chartUrl\": \"http://(vanity).visier.com/hr/prod/appcontainer#/analytics/queryFnChart?fn=(chartPath)\",     \"schema\": {         \"metrics\": [             \"Headcount\"         ],         \"dimensions\": [             {                 \"name\": \"Tenure Range\"             },             {                 \"name\": \"Tenure Range\",                 \"paths\": [                     \"Employee\"                 ]             }         ]     },     \"data\": {         \"dataJson\": \"(hidden)\",         \"context\": \"{\\\"filters\\\":[],\\\"timeFilter\\\":[\\\"Apr 2024\\\"]}\"     }  }  ```  <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>

        :param question:
        :type question: str
        :param thread_state_question_state:
        :type thread_state_question_state: List[str]
        :param options_include_visual:
        :type options_include_visual: bool
        :param options_chart_options_width:
        :type options_chart_options_width: int
        :param options_chart_options_height:
        :type options_chart_options_height: int
        :param options_include_data:
        :type options_include_data: bool
        :param options_data_format:
        :type options_data_format: str
        :param options_include_reworded_question:
        :type options_include_reworded_question: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._vee_query_request_serialize(
            question=question,
            thread_state_question_state=thread_state_question_state,
            options_include_visual=options_include_visual,
            options_chart_options_width=options_chart_options_width,
            options_chart_options_height=options_chart_options_height,
            options_include_data=options_include_data,
            options_data_format=options_data_format,
            options_include_reworded_question=options_include_reworded_question,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VeeResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def vee_query_request_with_http_info(
        self,
        question: Optional[StrictStr] = None,
        thread_state_question_state: Optional[List[StrictStr]] = None,
        options_include_visual: Optional[StrictBool] = None,
        options_chart_options_width: Optional[StrictInt] = None,
        options_chart_options_height: Optional[StrictInt] = None,
        options_include_data: Optional[StrictBool] = None,
        options_data_format: Optional[StrictStr] = None,
        options_include_reworded_question: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VeeResponseDTO]:
        """Ask Vee a question

        Use this API to ask Vee a People Analytic question and receive a response.  Options `includeData` and `includeVisual` can be set in the request data to receive additional data corresponding to the answer.   [ Example 1 ] initiating a conversation with Vee: `POST v1alpha/rest/vee/query` with body data  ```json  {      \"question\": \"what is the headcount by gender in each org?\",      \"options\": {          \"includeVisual\": \"true\",          \"includeData\": \"true\",          \"rewordedQuestion\": \"true\"      }  }  ```  returns  ```json  {     \"threadState\": {         \"questionState\": [             \"(encrypted threadState string)\"         ]     },     \"statusCode\": {         \"statusCode\": \"VEE_API_SUCCESS\",         \"statusMsg\": \"Successful Vee response for question=what is the headcount by gender in each org?\"     },     \"narrative\": \"In Apr 2024, the Headcount: for Man & Operations was the largest at 165 (16.1% of total) and for Woman & BlueSphere was the smallest at 1 (0.1% of total).\",     \"chartUrl\": \"http://(vanity).visier.com/hr/prod/appcontainer#/analytics/queryFnChart?fn=(chartPath)\",     \"schema\": {         \"metrics\": [             \"Headcount\"         ],         \"dimensions\": [             {                 \"name\": \"Organization\"             },             {                 \"name\": \"Gender\"             },             {                 \"name\": \"Gender\",                 \"paths\": [                     \"Employee\"                 ]             },             {                 \"name\": \"Organization\",                 \"paths\": [                     \"Employee\"                 ]             }         ]     },     \"data\": {         \"dataJson\": \"(hidden for length)\",         \"context\": \"{\\\"filters\\\":[],\\\"timeFilter\\\":[\\\"Apr 2024\\\"]}\"   ,     \"visual\": {         \"image\": \"(base64 encoded PNG of rasterized chart)\"         \"title\": \"Trend of Average Hourly Rate by Gender\",         \"context\": \"{\\\"filters\\\":[],\\\"timeFilter\\\":[\\\"Apr 2024\\\"]}\"     },     \"rewordedQuestion\": \"What is the gender breakdown of our workforce by organization this month?\"  }  ```   [ Example 2 ] Asking Vee a followup question: `POST v1alpha/rest/vee/query` with body data:  ```json  {     \"question\": \"what about by tenure?\",     \"threadState\": {         \"questionState\": [             \"(valueof_questionState_from_Example_1_above)\"         ]     },     \"options\": {         \"includeVisual\": \"false\",         \"includeData\": \"true\",         \"rewordedQuestion\": \"false\"     }  }  ````  returns  ```json  {     \"threadState\": {         \"questionState\": [             \"(valueof_questionState_from_Example_1_above)\",             \"(new encrypted threadState string)\"         ]     },     \"statusCode\": {         \"statusCode\": \"VEE_API_SUCCESS\",         \"statusMsg\": \"Successful Vee response for question=what about by tenure?\"     },     \"narrative\": \"In Apr 2024, the Headcount by Tenure Range were: 0 to 1 yr was 205 (20% of total), 1 to 2 yrs was 121 (11.8% of total) and 2 to 3 yrs was 91 (8.86% of total)and 4 more.\",     \"chartUrl\": \"http://(vanity).visier.com/hr/prod/appcontainer#/analytics/queryFnChart?fn=(chartPath)\",     \"schema\": {         \"metrics\": [             \"Headcount\"         ],         \"dimensions\": [             {                 \"name\": \"Tenure Range\"             },             {                 \"name\": \"Tenure Range\",                 \"paths\": [                     \"Employee\"                 ]             }         ]     },     \"data\": {         \"dataJson\": \"(hidden)\",         \"context\": \"{\\\"filters\\\":[],\\\"timeFilter\\\":[\\\"Apr 2024\\\"]}\"     }  }  ```  <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>

        :param question:
        :type question: str
        :param thread_state_question_state:
        :type thread_state_question_state: List[str]
        :param options_include_visual:
        :type options_include_visual: bool
        :param options_chart_options_width:
        :type options_chart_options_width: int
        :param options_chart_options_height:
        :type options_chart_options_height: int
        :param options_include_data:
        :type options_include_data: bool
        :param options_data_format:
        :type options_data_format: str
        :param options_include_reworded_question:
        :type options_include_reworded_question: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._vee_query_request_serialize(
            question=question,
            thread_state_question_state=thread_state_question_state,
            options_include_visual=options_include_visual,
            options_chart_options_width=options_chart_options_width,
            options_chart_options_height=options_chart_options_height,
            options_include_data=options_include_data,
            options_data_format=options_data_format,
            options_include_reworded_question=options_include_reworded_question,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VeeResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def vee_query_request_without_preload_content(
        self,
        question: Optional[StrictStr] = None,
        thread_state_question_state: Optional[List[StrictStr]] = None,
        options_include_visual: Optional[StrictBool] = None,
        options_chart_options_width: Optional[StrictInt] = None,
        options_chart_options_height: Optional[StrictInt] = None,
        options_include_data: Optional[StrictBool] = None,
        options_data_format: Optional[StrictStr] = None,
        options_include_reworded_question: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Ask Vee a question

        Use this API to ask Vee a People Analytic question and receive a response.  Options `includeData` and `includeVisual` can be set in the request data to receive additional data corresponding to the answer.   [ Example 1 ] initiating a conversation with Vee: `POST v1alpha/rest/vee/query` with body data  ```json  {      \"question\": \"what is the headcount by gender in each org?\",      \"options\": {          \"includeVisual\": \"true\",          \"includeData\": \"true\",          \"rewordedQuestion\": \"true\"      }  }  ```  returns  ```json  {     \"threadState\": {         \"questionState\": [             \"(encrypted threadState string)\"         ]     },     \"statusCode\": {         \"statusCode\": \"VEE_API_SUCCESS\",         \"statusMsg\": \"Successful Vee response for question=what is the headcount by gender in each org?\"     },     \"narrative\": \"In Apr 2024, the Headcount: for Man & Operations was the largest at 165 (16.1% of total) and for Woman & BlueSphere was the smallest at 1 (0.1% of total).\",     \"chartUrl\": \"http://(vanity).visier.com/hr/prod/appcontainer#/analytics/queryFnChart?fn=(chartPath)\",     \"schema\": {         \"metrics\": [             \"Headcount\"         ],         \"dimensions\": [             {                 \"name\": \"Organization\"             },             {                 \"name\": \"Gender\"             },             {                 \"name\": \"Gender\",                 \"paths\": [                     \"Employee\"                 ]             },             {                 \"name\": \"Organization\",                 \"paths\": [                     \"Employee\"                 ]             }         ]     },     \"data\": {         \"dataJson\": \"(hidden for length)\",         \"context\": \"{\\\"filters\\\":[],\\\"timeFilter\\\":[\\\"Apr 2024\\\"]}\"   ,     \"visual\": {         \"image\": \"(base64 encoded PNG of rasterized chart)\"         \"title\": \"Trend of Average Hourly Rate by Gender\",         \"context\": \"{\\\"filters\\\":[],\\\"timeFilter\\\":[\\\"Apr 2024\\\"]}\"     },     \"rewordedQuestion\": \"What is the gender breakdown of our workforce by organization this month?\"  }  ```   [ Example 2 ] Asking Vee a followup question: `POST v1alpha/rest/vee/query` with body data:  ```json  {     \"question\": \"what about by tenure?\",     \"threadState\": {         \"questionState\": [             \"(valueof_questionState_from_Example_1_above)\"         ]     },     \"options\": {         \"includeVisual\": \"false\",         \"includeData\": \"true\",         \"rewordedQuestion\": \"false\"     }  }  ````  returns  ```json  {     \"threadState\": {         \"questionState\": [             \"(valueof_questionState_from_Example_1_above)\",             \"(new encrypted threadState string)\"         ]     },     \"statusCode\": {         \"statusCode\": \"VEE_API_SUCCESS\",         \"statusMsg\": \"Successful Vee response for question=what about by tenure?\"     },     \"narrative\": \"In Apr 2024, the Headcount by Tenure Range were: 0 to 1 yr was 205 (20% of total), 1 to 2 yrs was 121 (11.8% of total) and 2 to 3 yrs was 91 (8.86% of total)and 4 more.\",     \"chartUrl\": \"http://(vanity).visier.com/hr/prod/appcontainer#/analytics/queryFnChart?fn=(chartPath)\",     \"schema\": {         \"metrics\": [             \"Headcount\"         ],         \"dimensions\": [             {                 \"name\": \"Tenure Range\"             },             {                 \"name\": \"Tenure Range\",                 \"paths\": [                     \"Employee\"                 ]             }         ]     },     \"data\": {         \"dataJson\": \"(hidden)\",         \"context\": \"{\\\"filters\\\":[],\\\"timeFilter\\\":[\\\"Apr 2024\\\"]}\"     }  }  ```  <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>

        :param question:
        :type question: str
        :param thread_state_question_state:
        :type thread_state_question_state: List[str]
        :param options_include_visual:
        :type options_include_visual: bool
        :param options_chart_options_width:
        :type options_chart_options_width: int
        :param options_chart_options_height:
        :type options_chart_options_height: int
        :param options_include_data:
        :type options_include_data: bool
        :param options_data_format:
        :type options_data_format: str
        :param options_include_reworded_question:
        :type options_include_reworded_question: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._vee_query_request_serialize(
            question=question,
            thread_state_question_state=thread_state_question_state,
            options_include_visual=options_include_visual,
            options_chart_options_width=options_chart_options_width,
            options_chart_options_height=options_chart_options_height,
            options_include_data=options_include_data,
            options_data_format=options_data_format,
            options_include_reworded_question=options_include_reworded_question,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VeeResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _vee_query_request_serialize(
        self,
        question,
        thread_state_question_state,
        options_include_visual,
        options_chart_options_width,
        options_chart_options_height,
        options_include_data,
        options_data_format,
        options_include_reworded_question,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'threadState.questionState': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if question is not None:
            
            _query_params.append(('question', question))
            
        if thread_state_question_state is not None:
            
            _query_params.append(('threadState.questionState', thread_state_question_state))
            
        if options_include_visual is not None:
            
            _query_params.append(('options.includeVisual', options_include_visual))
            
        if options_chart_options_width is not None:
            
            _query_params.append(('options.chartOptions.width', options_chart_options_width))
            
        if options_chart_options_height is not None:
            
            _query_params.append(('options.chartOptions.height', options_chart_options_height))
            
        if options_include_data is not None:
            
            _query_params.append(('options.includeData', options_include_data))
            
        if options_data_format is not None:
            
            _query_params.append(('options.dataFormat', options_data_format))
            
        if options_include_reworded_question is not None:
            
            _query_params.append(('options.includeRewordedQuestion', options_include_reworded_question))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'CookieAuth', 
            'ApiKeyAuth', 
            'OAuth2Auth', 
            'OAuth2Auth', 
            'BearerAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1alpha/rest/vee/query',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def vee_sample_questions(
        self,
        question: Optional[StrictStr] = None,
        thread_state_question_state: Optional[List[StrictStr]] = None,
        options_include_visual: Optional[StrictBool] = None,
        options_chart_options_width: Optional[StrictInt] = None,
        options_chart_options_height: Optional[StrictInt] = None,
        options_include_data: Optional[StrictBool] = None,
        options_data_format: Optional[StrictStr] = None,
        options_include_reworded_question: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VeeSampleQuestionLibraryDTO:
        """Get a list of sample questions

        To get started with Vee, use this API to get a list of sample questions.  Example: `GET /v1alpha/rest/vee/sample-questions` returns a string list of questions.  ```json     questions {         \"questions\": \"What is the turnover rate?\"         \"metadata\": {             \"categories\": \"metricQuestion\"\"         }     }  ```   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>

        :param question:
        :type question: str
        :param thread_state_question_state:
        :type thread_state_question_state: List[str]
        :param options_include_visual:
        :type options_include_visual: bool
        :param options_chart_options_width:
        :type options_chart_options_width: int
        :param options_chart_options_height:
        :type options_chart_options_height: int
        :param options_include_data:
        :type options_include_data: bool
        :param options_data_format:
        :type options_data_format: str
        :param options_include_reworded_question:
        :type options_include_reworded_question: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._vee_sample_questions_serialize(
            question=question,
            thread_state_question_state=thread_state_question_state,
            options_include_visual=options_include_visual,
            options_chart_options_width=options_chart_options_width,
            options_chart_options_height=options_chart_options_height,
            options_include_data=options_include_data,
            options_data_format=options_data_format,
            options_include_reworded_question=options_include_reworded_question,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VeeSampleQuestionLibraryDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def vee_sample_questions_with_http_info(
        self,
        question: Optional[StrictStr] = None,
        thread_state_question_state: Optional[List[StrictStr]] = None,
        options_include_visual: Optional[StrictBool] = None,
        options_chart_options_width: Optional[StrictInt] = None,
        options_chart_options_height: Optional[StrictInt] = None,
        options_include_data: Optional[StrictBool] = None,
        options_data_format: Optional[StrictStr] = None,
        options_include_reworded_question: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VeeSampleQuestionLibraryDTO]:
        """Get a list of sample questions

        To get started with Vee, use this API to get a list of sample questions.  Example: `GET /v1alpha/rest/vee/sample-questions` returns a string list of questions.  ```json     questions {         \"questions\": \"What is the turnover rate?\"         \"metadata\": {             \"categories\": \"metricQuestion\"\"         }     }  ```   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>

        :param question:
        :type question: str
        :param thread_state_question_state:
        :type thread_state_question_state: List[str]
        :param options_include_visual:
        :type options_include_visual: bool
        :param options_chart_options_width:
        :type options_chart_options_width: int
        :param options_chart_options_height:
        :type options_chart_options_height: int
        :param options_include_data:
        :type options_include_data: bool
        :param options_data_format:
        :type options_data_format: str
        :param options_include_reworded_question:
        :type options_include_reworded_question: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._vee_sample_questions_serialize(
            question=question,
            thread_state_question_state=thread_state_question_state,
            options_include_visual=options_include_visual,
            options_chart_options_width=options_chart_options_width,
            options_chart_options_height=options_chart_options_height,
            options_include_data=options_include_data,
            options_data_format=options_data_format,
            options_include_reworded_question=options_include_reworded_question,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VeeSampleQuestionLibraryDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def vee_sample_questions_without_preload_content(
        self,
        question: Optional[StrictStr] = None,
        thread_state_question_state: Optional[List[StrictStr]] = None,
        options_include_visual: Optional[StrictBool] = None,
        options_chart_options_width: Optional[StrictInt] = None,
        options_chart_options_height: Optional[StrictInt] = None,
        options_include_data: Optional[StrictBool] = None,
        options_data_format: Optional[StrictStr] = None,
        options_include_reworded_question: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a list of sample questions

        To get started with Vee, use this API to get a list of sample questions.  Example: `GET /v1alpha/rest/vee/sample-questions` returns a string list of questions.  ```json     questions {         \"questions\": \"What is the turnover rate?\"         \"metadata\": {             \"categories\": \"metricQuestion\"\"         }     }  ```   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>

        :param question:
        :type question: str
        :param thread_state_question_state:
        :type thread_state_question_state: List[str]
        :param options_include_visual:
        :type options_include_visual: bool
        :param options_chart_options_width:
        :type options_chart_options_width: int
        :param options_chart_options_height:
        :type options_chart_options_height: int
        :param options_include_data:
        :type options_include_data: bool
        :param options_data_format:
        :type options_data_format: str
        :param options_include_reworded_question:
        :type options_include_reworded_question: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._vee_sample_questions_serialize(
            question=question,
            thread_state_question_state=thread_state_question_state,
            options_include_visual=options_include_visual,
            options_chart_options_width=options_chart_options_width,
            options_chart_options_height=options_chart_options_height,
            options_include_data=options_include_data,
            options_data_format=options_data_format,
            options_include_reworded_question=options_include_reworded_question,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VeeSampleQuestionLibraryDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _vee_sample_questions_serialize(
        self,
        question,
        thread_state_question_state,
        options_include_visual,
        options_chart_options_width,
        options_chart_options_height,
        options_include_data,
        options_data_format,
        options_include_reworded_question,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'threadState.questionState': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if question is not None:
            
            _query_params.append(('question', question))
            
        if thread_state_question_state is not None:
            
            _query_params.append(('threadState.questionState', thread_state_question_state))
            
        if options_include_visual is not None:
            
            _query_params.append(('options.includeVisual', options_include_visual))
            
        if options_chart_options_width is not None:
            
            _query_params.append(('options.chartOptions.width', options_chart_options_width))
            
        if options_chart_options_height is not None:
            
            _query_params.append(('options.chartOptions.height', options_chart_options_height))
            
        if options_include_data is not None:
            
            _query_params.append(('options.includeData', options_include_data))
            
        if options_data_format is not None:
            
            _query_params.append(('options.dataFormat', options_data_format))
            
        if options_include_reworded_question is not None:
            
            _query_params.append(('options.includeRewordedQuestion', options_include_reworded_question))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'CookieAuth', 
            'ApiKeyAuth', 
            'OAuth2Auth', 
            'OAuth2Auth', 
            'BearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1alpha/rest/vee/sample-questions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


