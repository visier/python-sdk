# coding: utf-8

"""
    Visier Data Out APIs

    Visier APIs for getting data out of Visier, such as aggregate data and data version information.

    The version of the OpenAPI document: 22222222.99201.1438
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from visier.sdk.api.data_out.models.vee_response_dto import VeeResponseDTO
from visier.sdk.api.data_out.models.vee_sample_question_library_dto import VeeSampleQuestionLibraryDTO
from visier.sdk.api.data_out.models.vee_status_code_dto import VeeStatusCodeDTO

from visier.sdk.api.data_out.api_client import ApiClient, RequestSerialized
from visier.sdk.api.data_out.api_response import ApiResponse
from visier.sdk.api.data_out.rest import RESTResponseType


class VeeApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def vee_feedback(
        self,
        response_conversation_state_question_state: Annotated[Optional[List[StrictStr]], Field(description="The unique identifier of the conversation with Vee.")] = None,
        response_status_code_status_code: Annotated[Optional[StrictStr], Field(description="A status code indicating whether or not Vee successfully answered the question.")] = None,
        response_status_code_status_msg: Annotated[Optional[StrictStr], Field(description="Additional information about whether or not Vee successfully answered the question.")] = None,
        response_narrative: Annotated[Optional[StrictStr], Field(description="Vee's answer to the question.")] = None,
        response_chart_url: Annotated[Optional[StrictStr], Field(description="A URL to view the visualization in Visier.")] = None,
        response_schema_metrics: Annotated[Optional[List[StrictStr]], Field(description="A list of the metrics that contribute to Vee's answer.")] = None,
        response_data_data_json: Annotated[Optional[StrictStr], Field(description="A JSON string of fields and numerical values representing the data contributing to Vee's answer. For example, the number of employees per gender in Vee's answer.")] = None,
        response_data_context: Annotated[Optional[StrictStr], Field(description="The filter applied to the visualization generated by Vee. For example, a time filter of April 2024.")] = None,
        response_visual_image: Annotated[Optional[StrictStr], Field(description="A PNG visualization encoded in a base64 string.")] = None,
        response_visual_title: Annotated[Optional[StrictStr], Field(description="The visualization title.")] = None,
        response_visual_context: Annotated[Optional[StrictStr], Field(description="Any filters applied to the visualization. For example, a time filter of April 2024.")] = None,
        response_reworded_question: Annotated[Optional[StrictStr], Field(description="Vee's plain language interpretation of the original question. For example, if you asked \"what is the headcount by gender in each org?\", Vee might reword the question as \"What is the gender breakdown of our workforce by organization this month?\".")] = None,
        is_approved: Annotated[Optional[StrictBool], Field(description="If `true`, Vee answered the question correctly. If `false`, Vee's answer was incorrect or lacked details.")] = None,
        description: Annotated[Optional[StrictStr], Field(description="A description of how Vee should have answered the question or how Vee can improve the answer; for example, \"Expected Headcount metric, but Vee returned Average Headcount\".")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VeeStatusCodeDTO:
        """Submit Vee feedback

        Give Vee feedback for a previous answer. To submit feedback, include:  * The response object from the `/question` response.  * A rating of Vee's answer. If `isApproved` is `true`, Vee answered the question correctly. If `isApproved` is `false`, Vee's answer was incorrect or lacked details.  * A description of how Vee should have answered the question or how Vee can improve the answer, such as \"Expected Headcount metric, but Vee returned Average Headcount\".   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>

        :param response_conversation_state_question_state: The unique identifier of the conversation with Vee.
        :type response_conversation_state_question_state: List[str]
        :param response_status_code_status_code: A status code indicating whether or not Vee successfully answered the question.
        :type response_status_code_status_code: str
        :param response_status_code_status_msg: Additional information about whether or not Vee successfully answered the question.
        :type response_status_code_status_msg: str
        :param response_narrative: Vee's answer to the question.
        :type response_narrative: str
        :param response_chart_url: A URL to view the visualization in Visier.
        :type response_chart_url: str
        :param response_schema_metrics: A list of the metrics that contribute to Vee's answer.
        :type response_schema_metrics: List[str]
        :param response_data_data_json: A JSON string of fields and numerical values representing the data contributing to Vee's answer. For example, the number of employees per gender in Vee's answer.
        :type response_data_data_json: str
        :param response_data_context: The filter applied to the visualization generated by Vee. For example, a time filter of April 2024.
        :type response_data_context: str
        :param response_visual_image: A PNG visualization encoded in a base64 string.
        :type response_visual_image: str
        :param response_visual_title: The visualization title.
        :type response_visual_title: str
        :param response_visual_context: Any filters applied to the visualization. For example, a time filter of April 2024.
        :type response_visual_context: str
        :param response_reworded_question: Vee's plain language interpretation of the original question. For example, if you asked \"what is the headcount by gender in each org?\", Vee might reword the question as \"What is the gender breakdown of our workforce by organization this month?\".
        :type response_reworded_question: str
        :param is_approved: If `true`, Vee answered the question correctly. If `false`, Vee's answer was incorrect or lacked details.
        :type is_approved: bool
        :param description: A description of how Vee should have answered the question or how Vee can improve the answer; for example, \"Expected Headcount metric, but Vee returned Average Headcount\".
        :type description: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._vee_feedback_serialize(
            response_conversation_state_question_state=response_conversation_state_question_state,
            response_status_code_status_code=response_status_code_status_code,
            response_status_code_status_msg=response_status_code_status_msg,
            response_narrative=response_narrative,
            response_chart_url=response_chart_url,
            response_schema_metrics=response_schema_metrics,
            response_data_data_json=response_data_data_json,
            response_data_context=response_data_context,
            response_visual_image=response_visual_image,
            response_visual_title=response_visual_title,
            response_visual_context=response_visual_context,
            response_reworded_question=response_reworded_question,
            is_approved=is_approved,
            description=description,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VeeStatusCodeDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def vee_feedback_with_http_info(
        self,
        response_conversation_state_question_state: Annotated[Optional[List[StrictStr]], Field(description="The unique identifier of the conversation with Vee.")] = None,
        response_status_code_status_code: Annotated[Optional[StrictStr], Field(description="A status code indicating whether or not Vee successfully answered the question.")] = None,
        response_status_code_status_msg: Annotated[Optional[StrictStr], Field(description="Additional information about whether or not Vee successfully answered the question.")] = None,
        response_narrative: Annotated[Optional[StrictStr], Field(description="Vee's answer to the question.")] = None,
        response_chart_url: Annotated[Optional[StrictStr], Field(description="A URL to view the visualization in Visier.")] = None,
        response_schema_metrics: Annotated[Optional[List[StrictStr]], Field(description="A list of the metrics that contribute to Vee's answer.")] = None,
        response_data_data_json: Annotated[Optional[StrictStr], Field(description="A JSON string of fields and numerical values representing the data contributing to Vee's answer. For example, the number of employees per gender in Vee's answer.")] = None,
        response_data_context: Annotated[Optional[StrictStr], Field(description="The filter applied to the visualization generated by Vee. For example, a time filter of April 2024.")] = None,
        response_visual_image: Annotated[Optional[StrictStr], Field(description="A PNG visualization encoded in a base64 string.")] = None,
        response_visual_title: Annotated[Optional[StrictStr], Field(description="The visualization title.")] = None,
        response_visual_context: Annotated[Optional[StrictStr], Field(description="Any filters applied to the visualization. For example, a time filter of April 2024.")] = None,
        response_reworded_question: Annotated[Optional[StrictStr], Field(description="Vee's plain language interpretation of the original question. For example, if you asked \"what is the headcount by gender in each org?\", Vee might reword the question as \"What is the gender breakdown of our workforce by organization this month?\".")] = None,
        is_approved: Annotated[Optional[StrictBool], Field(description="If `true`, Vee answered the question correctly. If `false`, Vee's answer was incorrect or lacked details.")] = None,
        description: Annotated[Optional[StrictStr], Field(description="A description of how Vee should have answered the question or how Vee can improve the answer; for example, \"Expected Headcount metric, but Vee returned Average Headcount\".")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VeeStatusCodeDTO]:
        """Submit Vee feedback

        Give Vee feedback for a previous answer. To submit feedback, include:  * The response object from the `/question` response.  * A rating of Vee's answer. If `isApproved` is `true`, Vee answered the question correctly. If `isApproved` is `false`, Vee's answer was incorrect or lacked details.  * A description of how Vee should have answered the question or how Vee can improve the answer, such as \"Expected Headcount metric, but Vee returned Average Headcount\".   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>

        :param response_conversation_state_question_state: The unique identifier of the conversation with Vee.
        :type response_conversation_state_question_state: List[str]
        :param response_status_code_status_code: A status code indicating whether or not Vee successfully answered the question.
        :type response_status_code_status_code: str
        :param response_status_code_status_msg: Additional information about whether or not Vee successfully answered the question.
        :type response_status_code_status_msg: str
        :param response_narrative: Vee's answer to the question.
        :type response_narrative: str
        :param response_chart_url: A URL to view the visualization in Visier.
        :type response_chart_url: str
        :param response_schema_metrics: A list of the metrics that contribute to Vee's answer.
        :type response_schema_metrics: List[str]
        :param response_data_data_json: A JSON string of fields and numerical values representing the data contributing to Vee's answer. For example, the number of employees per gender in Vee's answer.
        :type response_data_data_json: str
        :param response_data_context: The filter applied to the visualization generated by Vee. For example, a time filter of April 2024.
        :type response_data_context: str
        :param response_visual_image: A PNG visualization encoded in a base64 string.
        :type response_visual_image: str
        :param response_visual_title: The visualization title.
        :type response_visual_title: str
        :param response_visual_context: Any filters applied to the visualization. For example, a time filter of April 2024.
        :type response_visual_context: str
        :param response_reworded_question: Vee's plain language interpretation of the original question. For example, if you asked \"what is the headcount by gender in each org?\", Vee might reword the question as \"What is the gender breakdown of our workforce by organization this month?\".
        :type response_reworded_question: str
        :param is_approved: If `true`, Vee answered the question correctly. If `false`, Vee's answer was incorrect or lacked details.
        :type is_approved: bool
        :param description: A description of how Vee should have answered the question or how Vee can improve the answer; for example, \"Expected Headcount metric, but Vee returned Average Headcount\".
        :type description: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._vee_feedback_serialize(
            response_conversation_state_question_state=response_conversation_state_question_state,
            response_status_code_status_code=response_status_code_status_code,
            response_status_code_status_msg=response_status_code_status_msg,
            response_narrative=response_narrative,
            response_chart_url=response_chart_url,
            response_schema_metrics=response_schema_metrics,
            response_data_data_json=response_data_data_json,
            response_data_context=response_data_context,
            response_visual_image=response_visual_image,
            response_visual_title=response_visual_title,
            response_visual_context=response_visual_context,
            response_reworded_question=response_reworded_question,
            is_approved=is_approved,
            description=description,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VeeStatusCodeDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def vee_feedback_without_preload_content(
        self,
        response_conversation_state_question_state: Annotated[Optional[List[StrictStr]], Field(description="The unique identifier of the conversation with Vee.")] = None,
        response_status_code_status_code: Annotated[Optional[StrictStr], Field(description="A status code indicating whether or not Vee successfully answered the question.")] = None,
        response_status_code_status_msg: Annotated[Optional[StrictStr], Field(description="Additional information about whether or not Vee successfully answered the question.")] = None,
        response_narrative: Annotated[Optional[StrictStr], Field(description="Vee's answer to the question.")] = None,
        response_chart_url: Annotated[Optional[StrictStr], Field(description="A URL to view the visualization in Visier.")] = None,
        response_schema_metrics: Annotated[Optional[List[StrictStr]], Field(description="A list of the metrics that contribute to Vee's answer.")] = None,
        response_data_data_json: Annotated[Optional[StrictStr], Field(description="A JSON string of fields and numerical values representing the data contributing to Vee's answer. For example, the number of employees per gender in Vee's answer.")] = None,
        response_data_context: Annotated[Optional[StrictStr], Field(description="The filter applied to the visualization generated by Vee. For example, a time filter of April 2024.")] = None,
        response_visual_image: Annotated[Optional[StrictStr], Field(description="A PNG visualization encoded in a base64 string.")] = None,
        response_visual_title: Annotated[Optional[StrictStr], Field(description="The visualization title.")] = None,
        response_visual_context: Annotated[Optional[StrictStr], Field(description="Any filters applied to the visualization. For example, a time filter of April 2024.")] = None,
        response_reworded_question: Annotated[Optional[StrictStr], Field(description="Vee's plain language interpretation of the original question. For example, if you asked \"what is the headcount by gender in each org?\", Vee might reword the question as \"What is the gender breakdown of our workforce by organization this month?\".")] = None,
        is_approved: Annotated[Optional[StrictBool], Field(description="If `true`, Vee answered the question correctly. If `false`, Vee's answer was incorrect or lacked details.")] = None,
        description: Annotated[Optional[StrictStr], Field(description="A description of how Vee should have answered the question or how Vee can improve the answer; for example, \"Expected Headcount metric, but Vee returned Average Headcount\".")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Submit Vee feedback

        Give Vee feedback for a previous answer. To submit feedback, include:  * The response object from the `/question` response.  * A rating of Vee's answer. If `isApproved` is `true`, Vee answered the question correctly. If `isApproved` is `false`, Vee's answer was incorrect or lacked details.  * A description of how Vee should have answered the question or how Vee can improve the answer, such as \"Expected Headcount metric, but Vee returned Average Headcount\".   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>

        :param response_conversation_state_question_state: The unique identifier of the conversation with Vee.
        :type response_conversation_state_question_state: List[str]
        :param response_status_code_status_code: A status code indicating whether or not Vee successfully answered the question.
        :type response_status_code_status_code: str
        :param response_status_code_status_msg: Additional information about whether or not Vee successfully answered the question.
        :type response_status_code_status_msg: str
        :param response_narrative: Vee's answer to the question.
        :type response_narrative: str
        :param response_chart_url: A URL to view the visualization in Visier.
        :type response_chart_url: str
        :param response_schema_metrics: A list of the metrics that contribute to Vee's answer.
        :type response_schema_metrics: List[str]
        :param response_data_data_json: A JSON string of fields and numerical values representing the data contributing to Vee's answer. For example, the number of employees per gender in Vee's answer.
        :type response_data_data_json: str
        :param response_data_context: The filter applied to the visualization generated by Vee. For example, a time filter of April 2024.
        :type response_data_context: str
        :param response_visual_image: A PNG visualization encoded in a base64 string.
        :type response_visual_image: str
        :param response_visual_title: The visualization title.
        :type response_visual_title: str
        :param response_visual_context: Any filters applied to the visualization. For example, a time filter of April 2024.
        :type response_visual_context: str
        :param response_reworded_question: Vee's plain language interpretation of the original question. For example, if you asked \"what is the headcount by gender in each org?\", Vee might reword the question as \"What is the gender breakdown of our workforce by organization this month?\".
        :type response_reworded_question: str
        :param is_approved: If `true`, Vee answered the question correctly. If `false`, Vee's answer was incorrect or lacked details.
        :type is_approved: bool
        :param description: A description of how Vee should have answered the question or how Vee can improve the answer; for example, \"Expected Headcount metric, but Vee returned Average Headcount\".
        :type description: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._vee_feedback_serialize(
            response_conversation_state_question_state=response_conversation_state_question_state,
            response_status_code_status_code=response_status_code_status_code,
            response_status_code_status_msg=response_status_code_status_msg,
            response_narrative=response_narrative,
            response_chart_url=response_chart_url,
            response_schema_metrics=response_schema_metrics,
            response_data_data_json=response_data_data_json,
            response_data_context=response_data_context,
            response_visual_image=response_visual_image,
            response_visual_title=response_visual_title,
            response_visual_context=response_visual_context,
            response_reworded_question=response_reworded_question,
            is_approved=is_approved,
            description=description,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VeeStatusCodeDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _vee_feedback_serialize(
        self,
        response_conversation_state_question_state,
        response_status_code_status_code,
        response_status_code_status_msg,
        response_narrative,
        response_chart_url,
        response_schema_metrics,
        response_data_data_json,
        response_data_context,
        response_visual_image,
        response_visual_title,
        response_visual_context,
        response_reworded_question,
        is_approved,
        description,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'response.conversationState.questionState': 'multi',
            'response.schema.metrics': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if response_conversation_state_question_state is not None:
            
            _query_params.append(('response.conversationState.questionState', response_conversation_state_question_state))
            
        if response_status_code_status_code is not None:
            
            _query_params.append(('response.statusCode.statusCode', response_status_code_status_code))
            
        if response_status_code_status_msg is not None:
            
            _query_params.append(('response.statusCode.statusMsg', response_status_code_status_msg))
            
        if response_narrative is not None:
            
            _query_params.append(('response.narrative', response_narrative))
            
        if response_chart_url is not None:
            
            _query_params.append(('response.chartUrl', response_chart_url))
            
        if response_schema_metrics is not None:
            
            _query_params.append(('response.schema.metrics', response_schema_metrics))
            
        if response_data_data_json is not None:
            
            _query_params.append(('response.data.dataJson', response_data_data_json))
            
        if response_data_context is not None:
            
            _query_params.append(('response.data.context', response_data_context))
            
        if response_visual_image is not None:
            
            _query_params.append(('response.visual.image', response_visual_image))
            
        if response_visual_title is not None:
            
            _query_params.append(('response.visual.title', response_visual_title))
            
        if response_visual_context is not None:
            
            _query_params.append(('response.visual.context', response_visual_context))
            
        if response_reworded_question is not None:
            
            _query_params.append(('response.rewordedQuestion', response_reworded_question))
            
        if is_approved is not None:
            
            _query_params.append(('isApproved', is_approved))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'CookieAuth', 
            'ApiKeyAuth', 
            'OAuth2Auth', 
            'OAuth2Auth', 
            'BearerAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1alpha/rest/vee/feedback',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def vee_question_request(
        self,
        question: Annotated[Optional[StrictStr], Field(description="The question to ask Vee. If asking a follow-up question or continuing a conversation with Vee, specify the `conversationState` object from the question's response.")] = None,
        conversation_state_question_state: Annotated[Optional[List[StrictStr]], Field(description="The unique identifier of the conversation with Vee.")] = None,
        options_include_visual: Annotated[Optional[StrictBool], Field(description="If `true`, returns a base64 string-encoded PNG of a rendered visualization with Vee's answer. Default is `false`.")] = None,
        options_visual_options_width: Annotated[Optional[StrictInt], Field(description="The pixel width of the rendered visualization. Default is 600. Valid values are between 160 and 1600.")] = None,
        options_visual_options_height: Annotated[Optional[StrictInt], Field(description="The pixel height of the rendered visualization. Default is 338. Valid values are between 90 and 900.")] = None,
        options_include_data: Annotated[Optional[StrictBool], Field(description="If `true`, returns additional data relevant to the question, including `dataJson` (visualization data) and `context` (filters applied to the visualization). Default is `false`.")] = None,
        options_data_format: Annotated[Optional[StrictStr], Field(description="The format to return visualization data in. Valid values: `json`.")] = None,
        options_include_reworded_question: Annotated[Optional[StrictBool], Field(description="If `true`, returns Vee's plain language interpretation of the original question. For example, if you asked \"what is the headcount by gender in each org?\", Vee might reword the question as \"What is the gender breakdown of our workforce by organization this month?\". Default is `false`.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VeeResponseDTO:
        """Ask Vee a question

        Use plain language to ask Vee a people question. Use query parameters to specify how Vee should respond, such as returning a visualization, data, or rewording the question.    The response always returns a `conversationState` object containing a unique ID for the conversation. To ask a follow-up question or continue the conversation with Vee, include the `conversationState` from the response in your next `/question` call. To submit feedback about Vee's answer, copy the entire response into your `/feedback` call.   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>

        :param question: The question to ask Vee. If asking a follow-up question or continuing a conversation with Vee, specify the `conversationState` object from the question's response.
        :type question: str
        :param conversation_state_question_state: The unique identifier of the conversation with Vee.
        :type conversation_state_question_state: List[str]
        :param options_include_visual: If `true`, returns a base64 string-encoded PNG of a rendered visualization with Vee's answer. Default is `false`.
        :type options_include_visual: bool
        :param options_visual_options_width: The pixel width of the rendered visualization. Default is 600. Valid values are between 160 and 1600.
        :type options_visual_options_width: int
        :param options_visual_options_height: The pixel height of the rendered visualization. Default is 338. Valid values are between 90 and 900.
        :type options_visual_options_height: int
        :param options_include_data: If `true`, returns additional data relevant to the question, including `dataJson` (visualization data) and `context` (filters applied to the visualization). Default is `false`.
        :type options_include_data: bool
        :param options_data_format: The format to return visualization data in. Valid values: `json`.
        :type options_data_format: str
        :param options_include_reworded_question: If `true`, returns Vee's plain language interpretation of the original question. For example, if you asked \"what is the headcount by gender in each org?\", Vee might reword the question as \"What is the gender breakdown of our workforce by organization this month?\". Default is `false`.
        :type options_include_reworded_question: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._vee_question_request_serialize(
            question=question,
            conversation_state_question_state=conversation_state_question_state,
            options_include_visual=options_include_visual,
            options_visual_options_width=options_visual_options_width,
            options_visual_options_height=options_visual_options_height,
            options_include_data=options_include_data,
            options_data_format=options_data_format,
            options_include_reworded_question=options_include_reworded_question,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VeeResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def vee_question_request_with_http_info(
        self,
        question: Annotated[Optional[StrictStr], Field(description="The question to ask Vee. If asking a follow-up question or continuing a conversation with Vee, specify the `conversationState` object from the question's response.")] = None,
        conversation_state_question_state: Annotated[Optional[List[StrictStr]], Field(description="The unique identifier of the conversation with Vee.")] = None,
        options_include_visual: Annotated[Optional[StrictBool], Field(description="If `true`, returns a base64 string-encoded PNG of a rendered visualization with Vee's answer. Default is `false`.")] = None,
        options_visual_options_width: Annotated[Optional[StrictInt], Field(description="The pixel width of the rendered visualization. Default is 600. Valid values are between 160 and 1600.")] = None,
        options_visual_options_height: Annotated[Optional[StrictInt], Field(description="The pixel height of the rendered visualization. Default is 338. Valid values are between 90 and 900.")] = None,
        options_include_data: Annotated[Optional[StrictBool], Field(description="If `true`, returns additional data relevant to the question, including `dataJson` (visualization data) and `context` (filters applied to the visualization). Default is `false`.")] = None,
        options_data_format: Annotated[Optional[StrictStr], Field(description="The format to return visualization data in. Valid values: `json`.")] = None,
        options_include_reworded_question: Annotated[Optional[StrictBool], Field(description="If `true`, returns Vee's plain language interpretation of the original question. For example, if you asked \"what is the headcount by gender in each org?\", Vee might reword the question as \"What is the gender breakdown of our workforce by organization this month?\". Default is `false`.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VeeResponseDTO]:
        """Ask Vee a question

        Use plain language to ask Vee a people question. Use query parameters to specify how Vee should respond, such as returning a visualization, data, or rewording the question.    The response always returns a `conversationState` object containing a unique ID for the conversation. To ask a follow-up question or continue the conversation with Vee, include the `conversationState` from the response in your next `/question` call. To submit feedback about Vee's answer, copy the entire response into your `/feedback` call.   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>

        :param question: The question to ask Vee. If asking a follow-up question or continuing a conversation with Vee, specify the `conversationState` object from the question's response.
        :type question: str
        :param conversation_state_question_state: The unique identifier of the conversation with Vee.
        :type conversation_state_question_state: List[str]
        :param options_include_visual: If `true`, returns a base64 string-encoded PNG of a rendered visualization with Vee's answer. Default is `false`.
        :type options_include_visual: bool
        :param options_visual_options_width: The pixel width of the rendered visualization. Default is 600. Valid values are between 160 and 1600.
        :type options_visual_options_width: int
        :param options_visual_options_height: The pixel height of the rendered visualization. Default is 338. Valid values are between 90 and 900.
        :type options_visual_options_height: int
        :param options_include_data: If `true`, returns additional data relevant to the question, including `dataJson` (visualization data) and `context` (filters applied to the visualization). Default is `false`.
        :type options_include_data: bool
        :param options_data_format: The format to return visualization data in. Valid values: `json`.
        :type options_data_format: str
        :param options_include_reworded_question: If `true`, returns Vee's plain language interpretation of the original question. For example, if you asked \"what is the headcount by gender in each org?\", Vee might reword the question as \"What is the gender breakdown of our workforce by organization this month?\". Default is `false`.
        :type options_include_reworded_question: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._vee_question_request_serialize(
            question=question,
            conversation_state_question_state=conversation_state_question_state,
            options_include_visual=options_include_visual,
            options_visual_options_width=options_visual_options_width,
            options_visual_options_height=options_visual_options_height,
            options_include_data=options_include_data,
            options_data_format=options_data_format,
            options_include_reworded_question=options_include_reworded_question,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VeeResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def vee_question_request_without_preload_content(
        self,
        question: Annotated[Optional[StrictStr], Field(description="The question to ask Vee. If asking a follow-up question or continuing a conversation with Vee, specify the `conversationState` object from the question's response.")] = None,
        conversation_state_question_state: Annotated[Optional[List[StrictStr]], Field(description="The unique identifier of the conversation with Vee.")] = None,
        options_include_visual: Annotated[Optional[StrictBool], Field(description="If `true`, returns a base64 string-encoded PNG of a rendered visualization with Vee's answer. Default is `false`.")] = None,
        options_visual_options_width: Annotated[Optional[StrictInt], Field(description="The pixel width of the rendered visualization. Default is 600. Valid values are between 160 and 1600.")] = None,
        options_visual_options_height: Annotated[Optional[StrictInt], Field(description="The pixel height of the rendered visualization. Default is 338. Valid values are between 90 and 900.")] = None,
        options_include_data: Annotated[Optional[StrictBool], Field(description="If `true`, returns additional data relevant to the question, including `dataJson` (visualization data) and `context` (filters applied to the visualization). Default is `false`.")] = None,
        options_data_format: Annotated[Optional[StrictStr], Field(description="The format to return visualization data in. Valid values: `json`.")] = None,
        options_include_reworded_question: Annotated[Optional[StrictBool], Field(description="If `true`, returns Vee's plain language interpretation of the original question. For example, if you asked \"what is the headcount by gender in each org?\", Vee might reword the question as \"What is the gender breakdown of our workforce by organization this month?\". Default is `false`.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Ask Vee a question

        Use plain language to ask Vee a people question. Use query parameters to specify how Vee should respond, such as returning a visualization, data, or rewording the question.    The response always returns a `conversationState` object containing a unique ID for the conversation. To ask a follow-up question or continue the conversation with Vee, include the `conversationState` from the response in your next `/question` call. To submit feedback about Vee's answer, copy the entire response into your `/feedback` call.   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>

        :param question: The question to ask Vee. If asking a follow-up question or continuing a conversation with Vee, specify the `conversationState` object from the question's response.
        :type question: str
        :param conversation_state_question_state: The unique identifier of the conversation with Vee.
        :type conversation_state_question_state: List[str]
        :param options_include_visual: If `true`, returns a base64 string-encoded PNG of a rendered visualization with Vee's answer. Default is `false`.
        :type options_include_visual: bool
        :param options_visual_options_width: The pixel width of the rendered visualization. Default is 600. Valid values are between 160 and 1600.
        :type options_visual_options_width: int
        :param options_visual_options_height: The pixel height of the rendered visualization. Default is 338. Valid values are between 90 and 900.
        :type options_visual_options_height: int
        :param options_include_data: If `true`, returns additional data relevant to the question, including `dataJson` (visualization data) and `context` (filters applied to the visualization). Default is `false`.
        :type options_include_data: bool
        :param options_data_format: The format to return visualization data in. Valid values: `json`.
        :type options_data_format: str
        :param options_include_reworded_question: If `true`, returns Vee's plain language interpretation of the original question. For example, if you asked \"what is the headcount by gender in each org?\", Vee might reword the question as \"What is the gender breakdown of our workforce by organization this month?\". Default is `false`.
        :type options_include_reworded_question: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._vee_question_request_serialize(
            question=question,
            conversation_state_question_state=conversation_state_question_state,
            options_include_visual=options_include_visual,
            options_visual_options_width=options_visual_options_width,
            options_visual_options_height=options_visual_options_height,
            options_include_data=options_include_data,
            options_data_format=options_data_format,
            options_include_reworded_question=options_include_reworded_question,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VeeResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _vee_question_request_serialize(
        self,
        question,
        conversation_state_question_state,
        options_include_visual,
        options_visual_options_width,
        options_visual_options_height,
        options_include_data,
        options_data_format,
        options_include_reworded_question,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'conversationState.questionState': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if question is not None:
            
            _query_params.append(('question', question))
            
        if conversation_state_question_state is not None:
            
            _query_params.append(('conversationState.questionState', conversation_state_question_state))
            
        if options_include_visual is not None:
            
            _query_params.append(('options.includeVisual', options_include_visual))
            
        if options_visual_options_width is not None:
            
            _query_params.append(('options.visualOptions.width', options_visual_options_width))
            
        if options_visual_options_height is not None:
            
            _query_params.append(('options.visualOptions.height', options_visual_options_height))
            
        if options_include_data is not None:
            
            _query_params.append(('options.includeData', options_include_data))
            
        if options_data_format is not None:
            
            _query_params.append(('options.dataFormat', options_data_format))
            
        if options_include_reworded_question is not None:
            
            _query_params.append(('options.includeRewordedQuestion', options_include_reworded_question))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'CookieAuth', 
            'ApiKeyAuth', 
            'OAuth2Auth', 
            'OAuth2Auth', 
            'BearerAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1alpha/rest/vee/question',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def vee_sample_questions(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VeeSampleQuestionLibraryDTO:
        """Retrieve a list of sample questions to ask Vee

        Get a list of sample questions to help your users start using Vee. The response returns a list of questions, such as \"What is the turnover rate?\".    <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._vee_sample_questions_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VeeSampleQuestionLibraryDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def vee_sample_questions_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VeeSampleQuestionLibraryDTO]:
        """Retrieve a list of sample questions to ask Vee

        Get a list of sample questions to help your users start using Vee. The response returns a list of questions, such as \"What is the turnover rate?\".    <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._vee_sample_questions_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VeeSampleQuestionLibraryDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def vee_sample_questions_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve a list of sample questions to ask Vee

        Get a list of sample questions to help your users start using Vee. The response returns a list of questions, such as \"What is the turnover rate?\".    <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._vee_sample_questions_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VeeSampleQuestionLibraryDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _vee_sample_questions_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'CookieAuth', 
            'ApiKeyAuth', 
            'OAuth2Auth', 
            'OAuth2Auth', 
            'BearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1alpha/rest/vee/sample-questions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


