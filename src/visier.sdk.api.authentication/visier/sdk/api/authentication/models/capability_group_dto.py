# coding: utf-8

"""
    Visier Authentication APIs

    Visier APIs for authenticating with Visier. To use Visier's public APIs, you must first authenticate yourself as a Visier user who is allowed to use Visier APIs.

    The version of the OpenAPI document: 22222222.99201.1418
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CapabilityGroupDTO(BaseModel):
    """
    CapabilityGroupDTO
    """ # noqa: E501
    access_level: Optional[StrictStr] = Field(default=None, alias="accessLevel")
    api_access_level: Optional[StrictStr] = Field(default=None, alias="apiAccessLevel")
    api_view_level: Optional[StrictStr] = Field(default=None, alias="apiViewLevel")
    group: Optional[StrictStr] = None
    view_level: Optional[StrictStr] = Field(default=None, alias="viewLevel")
    __properties: ClassVar[List[str]] = ["accessLevel", "apiAccessLevel", "apiViewLevel", "group", "viewLevel"]

    @field_validator('access_level')
    def access_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NoAccess', 'ReadOnly', 'Write']):
            raise ValueError("must be one of enum values ('NoAccess', 'ReadOnly', 'Write')")
        return value

    @field_validator('api_access_level')
    def api_access_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NoAccess', 'ReadOnly', 'Write']):
            raise ValueError("must be one of enum values ('NoAccess', 'ReadOnly', 'Write')")
        return value

    @field_validator('api_view_level')
    def api_view_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Simple', 'Detailed', 'API', 'Certified', 'Embedded']):
            raise ValueError("must be one of enum values ('Simple', 'Detailed', 'API', 'Certified', 'Embedded')")
        return value

    @field_validator('group')
    def group_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['unknown', 'Any', 'NotRequired', 'Data', 'Application', 'ApplicationManagement', 'Security', 'UserManagement', 'Model', 'TenantManagement', 'Settings', 'DataUpload', 'FileSharing', 'Approve', 'TwoStepPublish', 'DirectPublish', 'TenantPreview', 'OpenAPI', 'OpenPlatform', 'ManageJobs', 'SupportPowerUser', 'LMSPowerUser', 'SupportProjectManager', 'SupportStandardUser', 'Translation', 'ModuleManagement', 'ClassicAdminConfig', 'ClassicReadOnlyAdminConfig', 'ClassicManageTenant', 'ClassicAnalysis', 'ClassicDraft', 'ClassicInternalDebugging', 'ClassicAPIRestricted', 'InfrastructureOperations', 'SolutionDesigner', 'AccessToAllData', 'FeatureToggle', 'SystemDiagnostics', 'SystemDiagnosticsSensitive', 'ConsumptionPricingAdmin', 'ReadImpersonator', 'WriteImpersonator', 'ReadImpersonated', 'WriteImpersonated', 'MasterImpersonator', 'Impersonator', 'WillowUser', 'WillowAdmin', 'GeminiManager', 'GeminiSupport', 'GeminiAdmin', 'ConsolidatedAnalytics', 'RequestSecureTicket', 'RequestAuthToken', 'OAuth2ClientRegistration', 'AccessToAllProperties', 'AccessToKeyProperties', 'PlanningManagement', 'WillowVantageCrawler', 'DataValidation', 'ContentReassignment', 'ReportDownloading', 'PlutoUser']):
            raise ValueError("must be one of enum values ('unknown', 'Any', 'NotRequired', 'Data', 'Application', 'ApplicationManagement', 'Security', 'UserManagement', 'Model', 'TenantManagement', 'Settings', 'DataUpload', 'FileSharing', 'Approve', 'TwoStepPublish', 'DirectPublish', 'TenantPreview', 'OpenAPI', 'OpenPlatform', 'ManageJobs', 'SupportPowerUser', 'LMSPowerUser', 'SupportProjectManager', 'SupportStandardUser', 'Translation', 'ModuleManagement', 'ClassicAdminConfig', 'ClassicReadOnlyAdminConfig', 'ClassicManageTenant', 'ClassicAnalysis', 'ClassicDraft', 'ClassicInternalDebugging', 'ClassicAPIRestricted', 'InfrastructureOperations', 'SolutionDesigner', 'AccessToAllData', 'FeatureToggle', 'SystemDiagnostics', 'SystemDiagnosticsSensitive', 'ConsumptionPricingAdmin', 'ReadImpersonator', 'WriteImpersonator', 'ReadImpersonated', 'WriteImpersonated', 'MasterImpersonator', 'Impersonator', 'WillowUser', 'WillowAdmin', 'GeminiManager', 'GeminiSupport', 'GeminiAdmin', 'ConsolidatedAnalytics', 'RequestSecureTicket', 'RequestAuthToken', 'OAuth2ClientRegistration', 'AccessToAllProperties', 'AccessToKeyProperties', 'PlanningManagement', 'WillowVantageCrawler', 'DataValidation', 'ContentReassignment', 'ReportDownloading', 'PlutoUser')")
        return value

    @field_validator('view_level')
    def view_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Simple', 'Detailed', 'API', 'Certified', 'Embedded']):
            raise ValueError("must be one of enum values ('Simple', 'Detailed', 'API', 'Certified', 'Embedded')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CapabilityGroupDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CapabilityGroupDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessLevel": obj.get("accessLevel"),
            "apiAccessLevel": obj.get("apiAccessLevel"),
            "apiViewLevel": obj.get("apiViewLevel"),
            "group": obj.get("group"),
            "viewLevel": obj.get("viewLevel")
        })
        return _obj


