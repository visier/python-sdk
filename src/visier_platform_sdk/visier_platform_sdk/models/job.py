# coding: utf-8

"""
    API Reference

    Detailed API reference documentation for Visier APIs. Includes all endpoints, headers, path parameters, query parameters, request body schema, response schema, JSON request samples, and JSON response samples.

    The version of the OpenAPI document: 22222222.99201.1910
    Contact: alpine@visier.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from visier_platform_sdk.models.skill import Skill
from typing import Optional, Set
from typing_extensions import Self

class Job(BaseModel):
    """
    Details describing a job. 
    """ # noqa: E501
    id: StrictStr = Field(description="The unique ID of the job. ")
    name: StrictStr = Field(description="The localized display name of the job. ")
    description: StrictStr = Field(description="The localized description of the job. ")
    isco_code: Optional[StrictStr] = Field(default=None, description="The International Standard Classification of Occupations (ISCO) code of the job.  This field will be omitted if the job is not associated with an ISCO code. ", alias="iscoCode")
    soc_code: Optional[StrictStr] = Field(default=None, description="The Standard Occupational Classification (SOC) code of the job.  This field will be omitted if the job is not associated with a SOC code. ", alias="socCode")
    alternative_titles: List[StrictStr] = Field(description="List of alternative localized names for this job. ", alias="alternativeTitles")
    essential_skills: List[Skill] = Field(description="List of essential skills for this job. ", alias="essentialSkills")
    optional_skills: List[Skill] = Field(description="List of optional skills for this job. ", alias="optionalSkills")
    remote_index: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The Remote Index represents how readily a job can be done through remote work. The index ranges from 0 to 100, where a value of 100 means the job can be done entirely remotely.  This field will be omitted if remotability is not applicable to the job. ", alias="remoteIndex")
    automation_index: Optional[StrictInt] = Field(default=None, description="The Automation Index represents how readily a job can be automated. The index ranges from 0 to 100, where a value of 100 means the job is completely automatable.  This field will be omitted if automation is not applicable to the job. ", alias="automationIndex")
    __properties: ClassVar[List[str]] = ["id", "name", "description", "iscoCode", "socCode", "alternativeTitles", "essentialSkills", "optionalSkills", "remoteIndex", "automationIndex"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Job from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in essential_skills (list)
        _items = []
        if self.essential_skills:
            for _item_essential_skills in self.essential_skills:
                if _item_essential_skills:
                    _items.append(_item_essential_skills.to_dict())
            _dict['essentialSkills'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in optional_skills (list)
        _items = []
        if self.optional_skills:
            for _item_optional_skills in self.optional_skills:
                if _item_optional_skills:
                    _items.append(_item_optional_skills.to_dict())
            _dict['optionalSkills'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Job from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "iscoCode": obj.get("iscoCode"),
            "socCode": obj.get("socCode"),
            "alternativeTitles": obj.get("alternativeTitles"),
            "essentialSkills": [Skill.from_dict(_item) for _item in obj["essentialSkills"]] if obj.get("essentialSkills") is not None else None,
            "optionalSkills": [Skill.from_dict(_item) for _item in obj["optionalSkills"]] if obj.get("optionalSkills") is not None else None,
            "remoteIndex": obj.get("remoteIndex"),
            "automationIndex": obj.get("automationIndex")
        })
        return _obj


