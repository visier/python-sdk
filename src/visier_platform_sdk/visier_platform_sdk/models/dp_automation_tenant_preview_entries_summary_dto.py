# coding: utf-8

"""
    API Reference

    Detailed API reference documentation for Visier APIs. Includes all endpoints, headers, path parameters, query parameters, request body schema, response schema, JSON request samples, and JSON response samples.

    The version of the OpenAPI document: 22222222.99201.1910
    Contact: alpine@visier.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from visier_platform_sdk.models.dp_automation_metric_validation_summary_dto import DpAutomationMetricValidationSummaryDTO
from typing import Optional, Set
from typing_extensions import Self

class DpAutomationTenantPreviewEntriesSummaryDTO(BaseModel):
    """
    DpAutomationTenantPreviewEntriesSummaryDTO
    """ # noqa: E501
    tenant_code: Optional[StrictStr] = Field(default=None, description="The tenant code of the analytic tenant. For example, \"WFF_j1r~i1o\".", alias="tenantCode")
    data_version: Optional[StrictStr] = Field(default=None, description="The data version ID.", alias="dataVersion")
    data_version_date: Optional[StrictStr] = Field(default=None, description="The date that the data version was created.", alias="dataVersionDate")
    metrics: Optional[List[DpAutomationMetricValidationSummaryDTO]] = Field(default=None, description="A list of metrics and their values.")
    __properties: ClassVar[List[str]] = ["tenantCode", "dataVersion", "dataVersionDate", "metrics"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DpAutomationTenantPreviewEntriesSummaryDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in metrics (list)
        _items = []
        if self.metrics:
            for _item_metrics in self.metrics:
                if _item_metrics:
                    _items.append(_item_metrics.to_dict())
            _dict['metrics'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DpAutomationTenantPreviewEntriesSummaryDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "tenantCode": obj.get("tenantCode"),
            "dataVersion": obj.get("dataVersion"),
            "dataVersionDate": obj.get("dataVersionDate"),
            "metrics": [DpAutomationMetricValidationSummaryDTO.from_dict(_item) for _item in obj["metrics"]] if obj.get("metrics") is not None else None
        })
        return _obj


