# coding: utf-8

"""
    API Reference

    Detailed API reference documentation for Visier APIs. Includes all endpoints, headers, path parameters, query parameters, request body schema, response schema, JSON request samples, and JSON response samples.

    The version of the OpenAPI document: 22222222.99201.2212
    Contact: alpine@visier.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from visier_platform_sdk.models.event_alert_notification_result_alert_details_dto import EventAlertNotificationResultAlertDetailsDTO
from visier_platform_sdk.models.trigger_criteria_result_info_dto import TriggerCriteriaResultInfoDTO
from typing import Optional, Set
from typing_extensions import Self

class EventAlertNotificationResultDTO(BaseModel):
    """
    A notification that has triggered for the user.
    """ # noqa: E501
    alert_notification_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the alert notification.", alias="alertNotificationId")
    alert_id: Optional[StrictStr] = Field(default=None, description="The unique identifier the alert that triggered the notification", alias="alertId")
    created_date: Optional[StrictStr] = Field(default=None, description="The date that the notification generated.", alias="createdDate")
    alert_details: Optional[EventAlertNotificationResultAlertDetailsDTO] = Field(default=None, description="Information about the triggered alert.", alias="alertDetails")
    result_info: Optional[List[TriggerCriteriaResultInfoDTO]] = Field(default=None, description="Information about the evaluated metric value.", alias="resultInfo")
    result_type: Optional[StrictStr] = Field(default=None, description="Whether the metric value was nominal (did not trigger the alert) or triggered the alert. Valid values:  * `TRIGGERED`: The alert was triggered.  * `NOMINAL`: The alert was nominal (not triggered).", alias="resultType")
    __properties: ClassVar[List[str]] = ["alertNotificationId", "alertId", "createdDate", "alertDetails", "resultInfo", "resultType"]

    @field_validator('result_type')
    def result_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NOMINAL', 'TRIGGERED']):
            raise ValueError("must be one of enum values ('NOMINAL', 'TRIGGERED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EventAlertNotificationResultDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of alert_details
        if self.alert_details:
            _dict['alertDetails'] = self.alert_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in result_info (list)
        _items = []
        if self.result_info:
            for _item_result_info in self.result_info:
                if _item_result_info:
                    _items.append(_item_result_info.to_dict())
            _dict['resultInfo'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EventAlertNotificationResultDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alertNotificationId": obj.get("alertNotificationId"),
            "alertId": obj.get("alertId"),
            "createdDate": obj.get("createdDate"),
            "alertDetails": EventAlertNotificationResultAlertDetailsDTO.from_dict(obj["alertDetails"]) if obj.get("alertDetails") is not None else None,
            "resultInfo": [TriggerCriteriaResultInfoDTO.from_dict(_item) for _item in obj["resultInfo"]] if obj.get("resultInfo") is not None else None,
            "resultType": obj.get("resultType")
        })
        return _obj


