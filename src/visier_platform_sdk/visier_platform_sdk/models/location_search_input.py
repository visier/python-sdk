# coding: utf-8

"""
    API Reference

    Detailed API reference documentation for Visier APIs. Includes all endpoints, headers, path parameters, query parameters, request body schema, response schema, JSON request samples, and JSON response samples.

    The version of the OpenAPI document: 22222222.99201.2046
    Contact: alpine@visier.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from visier_platform_sdk.models.location_search_input1 import LocationSearchInput1
from typing import Optional, Set
from typing_extensions import Self

class LocationSearchInput(BaseModel):
    """
    A list of location query parameters for bulk operation. The maximum batch size is 1000. 
    """ # noqa: E501
    search_inputs: List[LocationSearchInput1] = Field(alias="searchInputs")
    has_benchmark_value: Optional[StrictBool] = Field(default=None, description="Filter members based on the availability of benchmark values.  If `true`, members with benchmark values are returned.  If `false`, members without benchmark values are returned.  If no value is specified, all members are returned. ", alias="hasBenchmarkValue")
    __properties: ClassVar[List[str]] = ["searchInputs", "hasBenchmarkValue"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LocationSearchInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in search_inputs (list)
        _items = []
        if self.search_inputs:
            for _item_search_inputs in self.search_inputs:
                if _item_search_inputs:
                    _items.append(_item_search_inputs.to_dict())
            _dict['searchInputs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LocationSearchInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "searchInputs": [LocationSearchInput1.from_dict(_item) for _item in obj["searchInputs"]] if obj.get("searchInputs") is not None else None,
            "hasBenchmarkValue": obj.get("hasBenchmarkValue")
        })
        return _obj


