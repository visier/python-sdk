# coding: utf-8

"""
    API Reference

    Detailed API reference documentation for Visier APIs. Includes all endpoints, headers, path parameters, query parameters, request body schema, response schema, JSON request samples, and JSON response samples.

    The version of the OpenAPI document: 22222222.99201.2046
    Contact: alpine@visier.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ReceivingJobExtractedFileResponseDTO(BaseModel):
    """
    The files transferred to the analytic tenant from the receiving job. If the tenant has no previous data uploads, this list is empty.
    """ # noqa: E501
    upload_time: Optional[StrictStr] = Field(default=None, description="The upload time of the file.", alias="uploadTime")
    filename: Optional[StrictStr] = Field(default=None, description="The name of the file.")
    identifier: Optional[StrictStr] = Field(default=None, description="The unique identifier of the file.")
    source_id: Optional[StrictStr] = Field(default=None, description="The UUID of the source associated with the file. If the file isn't connected to a source, the UUID is a placeholder value.", alias="sourceId")
    source_object_name: Optional[StrictStr] = Field(default=None, description="The object name of the source associated with the file. If the file isn't connected to a source, the object name is empty.", alias="sourceObjectName")
    included: Optional[StrictBool] = Field(default=None, description="If `true`, the file is included in data version generation.")
    __properties: ClassVar[List[str]] = ["uploadTime", "filename", "identifier", "sourceId", "sourceObjectName", "included"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReceivingJobExtractedFileResponseDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReceivingJobExtractedFileResponseDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uploadTime": obj.get("uploadTime"),
            "filename": obj.get("filename"),
            "identifier": obj.get("identifier"),
            "sourceId": obj.get("sourceId"),
            "sourceObjectName": obj.get("sourceObjectName"),
            "included": obj.get("included")
        })
        return _obj


