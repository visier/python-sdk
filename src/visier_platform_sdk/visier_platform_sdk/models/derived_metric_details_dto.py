# coding: utf-8

"""
    API Reference

    Detailed API reference documentation for Visier APIs. Includes all endpoints, headers, path parameters, query parameters, request body schema, response schema, JSON request samples, and JSON response samples.

    The version of the OpenAPI document: 22222222.99200.22242
    Contact: alpine@visier.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DerivedMetricDetailsDTO(BaseModel):
    """
    Information about the metric, such as its formula and data type.
    """ # noqa: E501
    formula: Optional[StrictStr] = Field(default=None, description="The metric's formula written in Visier Formula Language (VFL).")
    data_type: Optional[StrictStr] = Field(default=None, description="The metric's data type. Valid values:   `Number`, `Integer`, `Ordinal`, `Categorical`, `Currency`, `Boolean`, `Percent`,  `IntegerPercent`, `PercentNoScaling`, `PercentagePoint`, `String`, `Text`, `LargeText`,  `Date`, `HourDuration`, `DayDuration`, `MonthDuration`, `YearDuration`.", alias="dataType")
    base_metric_id: Optional[StrictStr] = Field(default=None, description="The UUID of the metric from which this metric is derived.", alias="baseMetricId")
    derived_metric_type: Optional[StrictStr] = Field(default=None, description="The method through which to derive an existing metric. Valid values:  - `Annualized`: Calculate the metric as a yearly value.  - `AnnualizedRate`: Calculate the metric as a rate for the year. This type requires you to set another metric as the denominator for the calculation.  - `Arbitrary`: Calculate the metric in a custom way. This is the only derived metric in which you can modify the formula.  - `AverageCount`: Calculate the metric as an average over all members, like employees. This type requires you to set another metric as the denominator for the calculation.  - `AverageFTE`: Calculate the metric as a weighted average over all members, with full-time equivalent (FTE) values as weights. This type requires you to set another metric as the denominator for the calculation.  - `Proportion`: Calculate the metric as a percentage of the total.  - `Rate`: Calculate the metric as a rate. This type requires you to set another metric as the denominator for the calculation.", alias="derivedMetricType")
    denominator_metric_name: Optional[StrictStr] = Field(default=None, description="An optional metric to use as the denominator for the calculation. If defined, the derived metric is calculated as a fraction.", alias="denominatorMetricName")
    __properties: ClassVar[List[str]] = ["formula", "dataType", "baseMetricId", "derivedMetricType", "denominatorMetricName"]

    @field_validator('derived_metric_type')
    def derived_metric_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Rate', 'Annualized', 'AverageCount', 'AnnualizedRate', 'AverageFTE', 'Proportion', 'Arbitrary']):
            raise ValueError("must be one of enum values ('Rate', 'Annualized', 'AverageCount', 'AnnualizedRate', 'AverageFTE', 'Proportion', 'Arbitrary')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DerivedMetricDetailsDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DerivedMetricDetailsDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "formula": obj.get("formula"),
            "dataType": obj.get("dataType"),
            "baseMetricId": obj.get("baseMetricId"),
            "derivedMetricType": obj.get("derivedMetricType"),
            "denominatorMetricName": obj.get("denominatorMetricName")
        })
        return _obj


