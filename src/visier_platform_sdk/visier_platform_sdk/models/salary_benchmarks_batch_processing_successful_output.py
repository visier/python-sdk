# coding: utf-8

"""
    API Reference

    Detailed API reference documentation for Visier APIs. Includes all endpoints, headers, path parameters, query parameters, request body schema, response schema, JSON request samples, and JSON response samples.

    The version of the OpenAPI document: 22222222.99201.1910
    Contact: alpine@visier.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class SalaryBenchmarksBatchProcessingSuccessfulOutput(BaseModel):
    """
    The compensation benchmark values for individual requests within a bulk request. 
    """ # noqa: E501
    uuid: StrictStr = Field(description="A unique identifier of the individual requests. ")
    percentile10: StrictInt = Field(description="The 10th percentile base pay. ")
    percentile25: StrictInt = Field(description="The 25th percentile base pay. ")
    percentile50: StrictInt = Field(description="The 50th percentile base pay. ")
    percentile75: StrictInt = Field(description="The 75th percentile base pay. ")
    percentile90: StrictInt = Field(description="The 90th percentile base pay. ")
    aligned_range_min: StrictInt = Field(description="The lower bound of salaries that are aligned with the market. ", alias="alignedRangeMin")
    aligned_range_max: StrictInt = Field(description="The upper bound of salaries that are aligned with the market. ", alias="alignedRangeMax")
    reference_date: StrictStr = Field(description="The date that benchmark values are calculated for. ", alias="referenceDate")
    release_date: StrictStr = Field(description="The date that benchmark values are released. ", alias="releaseDate")
    industry_id: StrictStr = Field(description="The industry member ID for the returned benchmarks. ", alias="industryId")
    career_level_id: StrictStr = Field(description="The career level member ID for the returned benchmarks. ", alias="careerLevelId")
    __properties: ClassVar[List[str]] = ["uuid", "percentile10", "percentile25", "percentile50", "percentile75", "percentile90", "alignedRangeMin", "alignedRangeMax", "referenceDate", "releaseDate", "industryId", "careerLevelId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SalaryBenchmarksBatchProcessingSuccessfulOutput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SalaryBenchmarksBatchProcessingSuccessfulOutput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uuid": obj.get("uuid"),
            "percentile10": obj.get("percentile10"),
            "percentile25": obj.get("percentile25"),
            "percentile50": obj.get("percentile50"),
            "percentile75": obj.get("percentile75"),
            "percentile90": obj.get("percentile90"),
            "alignedRangeMin": obj.get("alignedRangeMin"),
            "alignedRangeMax": obj.get("alignedRangeMax"),
            "referenceDate": obj.get("referenceDate"),
            "releaseDate": obj.get("releaseDate"),
            "industryId": obj.get("industryId"),
            "careerLevelId": obj.get("careerLevelId")
        })
        return _obj


