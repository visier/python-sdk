# coding: utf-8

"""
    API Reference

    Detailed API reference documentation for Visier APIs. Includes all endpoints, headers, path parameters, query parameters, request body schema, response schema, JSON request samples, and JSON response samples.

    The version of the OpenAPI document: 22222222.99201.2176
    Contact: alpine@visier.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from visier_platform_sdk.models.relative_time_expression_dto import RelativeTimeExpressionDTO
from typing import Optional, Set
from typing_extensions import Self

class TimePeriodDTO(BaseModel):
    """
    A time period can define a specific interval of time or relative time period.
    """ # noqa: E501
    end: Optional[StrictStr] = Field(default=None, description="The end of the time period.")
    period_type: Optional[StrictStr] = Field(default=None, description="The period type for this interval. Default is `MONTH`.", alias="periodType")
    period_count: Optional[StrictInt] = Field(default=None, description="The number of periods per interval. Default is 1.", alias="periodCount")
    time_type: Optional[StrictStr] = Field(default=None, description="The type of time period.", alias="timeType")
    expression: Optional[RelativeTimeExpressionDTO] = Field(default=None, description="The expression that defines the relative time period.")
    __properties: ClassVar[List[str]] = ["end", "periodType", "periodCount", "timeType", "expression"]

    @field_validator('period_type')
    def period_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MONTH', 'DAY', 'WEEK', 'QUARTER', 'YEAR']):
            raise ValueError("must be one of enum values ('MONTH', 'DAY', 'WEEK', 'QUARTER', 'YEAR')")
        return value

    @field_validator('time_type')
    def time_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FIXED', 'PREVIOUS_PERIOD', 'PREVIOUS_YEAR', 'LAST_PERIOD_PREVIOUS_YEAR', 'CUSTOM', 'DYNAMIC_TIME', 'LAST_PERIODS']):
            raise ValueError("must be one of enum values ('FIXED', 'PREVIOUS_PERIOD', 'PREVIOUS_YEAR', 'LAST_PERIOD_PREVIOUS_YEAR', 'CUSTOM', 'DYNAMIC_TIME', 'LAST_PERIODS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TimePeriodDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of expression
        if self.expression:
            _dict['expression'] = self.expression.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TimePeriodDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "end": obj.get("end"),
            "periodType": obj.get("periodType"),
            "periodCount": obj.get("periodCount"),
            "timeType": obj.get("timeType"),
            "expression": RelativeTimeExpressionDTO.from_dict(obj["expression"]) if obj.get("expression") is not None else None
        })
        return _obj


