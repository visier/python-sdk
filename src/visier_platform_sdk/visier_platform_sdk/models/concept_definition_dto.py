# coding: utf-8

"""
    API Reference

    Detailed API reference documentation for Visier APIs. Includes all endpoints, headers, path parameters, query parameters, request body schema, response schema, JSON request samples, and JSON response samples.

    The version of the OpenAPI document: 22222222.99200.21494
    Contact: alpine@visier.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from visier_platform_sdk.models.basic_information_dto import BasicInformationDTO
from visier_platform_sdk.models.concept_type_details_dto import ConceptTypeDetailsDTO
from visier_platform_sdk.models.version_information_dto import VersionInformationDTO
from typing import Optional, Set
from typing_extensions import Self

class ConceptDefinitionDTO(BaseModel):
    """
    Information about the concept, such as its UUID and concept type.
    """ # noqa: E501
    uuid: Optional[StrictStr] = Field(default=None, description="The UUID identifying the concept.")
    object_name: Optional[StrictStr] = Field(default=None, description="The object name of the concept.", alias="objectName")
    basic_information: Optional[BasicInformationDTO] = Field(default=None, description="Fields that identify and describe the concept, such as its display name, description, and explanation.", alias="basicInformation")
    details: Optional[ConceptTypeDetailsDTO] = Field(default=None, description="The concept type and its details.")
    version_information: Optional[VersionInformationDTO] = Field(default=None, description="The object's version information. Version information is read-only. It indicates where the object originates from and whether the object has been modified in your tenant.", alias="versionInformation")
    __properties: ClassVar[List[str]] = ["uuid", "objectName", "basicInformation", "details", "versionInformation"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConceptDefinitionDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of basic_information
        if self.basic_information:
            _dict['basicInformation'] = self.basic_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of details
        if self.details:
            _dict['details'] = self.details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of version_information
        if self.version_information:
            _dict['versionInformation'] = self.version_information.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConceptDefinitionDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uuid": obj.get("uuid"),
            "objectName": obj.get("objectName"),
            "basicInformation": BasicInformationDTO.from_dict(obj["basicInformation"]) if obj.get("basicInformation") is not None else None,
            "details": ConceptTypeDetailsDTO.from_dict(obj["details"]) if obj.get("details") is not None else None,
            "versionInformation": VersionInformationDTO.from_dict(obj["versionInformation"]) if obj.get("versionInformation") is not None else None
        })
        return _obj


