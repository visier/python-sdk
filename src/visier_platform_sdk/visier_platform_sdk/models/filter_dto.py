# coding: utf-8

"""
    API Reference

    Detailed API reference documentation for Visier APIs. Includes all endpoints, headers, path parameters, query parameters, request body schema, response schema, JSON request samples, and JSON response samples.

    The version of the OpenAPI document: 22222222.99200.22171
    Contact: alpine@visier.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from visier_platform_sdk.models.concept_reference_filter_dto import ConceptReferenceFilterDTO
from visier_platform_sdk.models.key_group_filter_dto import KeyGroupFilterDTO
from visier_platform_sdk.models.member_filter_dto import MemberFilterDTO
from visier_platform_sdk.models.numeric_range_filter_dto import NumericRangeFilterDTO
from visier_platform_sdk.models.persisted_cohort_filter_dto import PersistedCohortFilterDTO
from visier_platform_sdk.models.selection_concept_reference_dto import SelectionConceptReferenceDTO
from visier_platform_sdk.models.time_period_filter_dto import TimePeriodFilterDTO
from typing import Optional, Set
from typing_extensions import Self

class FilterDTO(BaseModel):
    """
    A filter selects specific data points within a population.
    """ # noqa: E501
    selection_concept: Optional[SelectionConceptReferenceDTO] = Field(default=None, description="A filter that uses an existing selection concept in Visier.", alias="selectionConcept")
    member_set: Optional[MemberFilterDTO] = Field(default=None, description="A filter that includes or excludes dimension members.", alias="memberSet")
    concept_reference: Optional[ConceptReferenceFilterDTO] = Field(default=None, description="A filter that uses a reference to a concept in Visier.", alias="conceptReference")
    key_group: Optional[KeyGroupFilterDTO] = Field(default=None, description="A filter that uses a key group in Visier.", alias="keyGroup")
    persisted_cohort: Optional[PersistedCohortFilterDTO] = Field(default=None, description="A filter that uses a persisted cohort in Visier.", alias="persistedCohort")
    time_period: Optional[TimePeriodFilterDTO] = Field(default=None, description="A filter that uses a time period.", alias="timePeriod")
    numeric_range: Optional[NumericRangeFilterDTO] = Field(default=None, description="A filter that uses a numeric range.", alias="numericRange")
    __properties: ClassVar[List[str]] = ["selectionConcept", "memberSet", "conceptReference", "keyGroup", "persistedCohort", "timePeriod", "numericRange"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FilterDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of selection_concept
        if self.selection_concept:
            _dict['selectionConcept'] = self.selection_concept.to_dict()
        # override the default output from pydantic by calling `to_dict()` of member_set
        if self.member_set:
            _dict['memberSet'] = self.member_set.to_dict()
        # override the default output from pydantic by calling `to_dict()` of concept_reference
        if self.concept_reference:
            _dict['conceptReference'] = self.concept_reference.to_dict()
        # override the default output from pydantic by calling `to_dict()` of key_group
        if self.key_group:
            _dict['keyGroup'] = self.key_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of persisted_cohort
        if self.persisted_cohort:
            _dict['persistedCohort'] = self.persisted_cohort.to_dict()
        # override the default output from pydantic by calling `to_dict()` of time_period
        if self.time_period:
            _dict['timePeriod'] = self.time_period.to_dict()
        # override the default output from pydantic by calling `to_dict()` of numeric_range
        if self.numeric_range:
            _dict['numericRange'] = self.numeric_range.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FilterDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "selectionConcept": SelectionConceptReferenceDTO.from_dict(obj["selectionConcept"]) if obj.get("selectionConcept") is not None else None,
            "memberSet": MemberFilterDTO.from_dict(obj["memberSet"]) if obj.get("memberSet") is not None else None,
            "conceptReference": ConceptReferenceFilterDTO.from_dict(obj["conceptReference"]) if obj.get("conceptReference") is not None else None,
            "keyGroup": KeyGroupFilterDTO.from_dict(obj["keyGroup"]) if obj.get("keyGroup") is not None else None,
            "persistedCohort": PersistedCohortFilterDTO.from_dict(obj["persistedCohort"]) if obj.get("persistedCohort") is not None else None,
            "timePeriod": TimePeriodFilterDTO.from_dict(obj["timePeriod"]) if obj.get("timePeriod") is not None else None,
            "numericRange": NumericRangeFilterDTO.from_dict(obj["numericRange"]) if obj.get("numericRange") is not None else None
        })
        return _obj


