# coding: utf-8

"""
    API Reference

    Detailed API reference documentation for Visier APIs. Includes all endpoints, headers, path parameters, query parameters, request body schema, response schema, JSON request samples, and JSON response samples.

    The version of the OpenAPI document: 22222222.99201.2212
    Contact: alpine@visier.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from visier_platform_sdk.models.relative_time_selection_dto import RelativeTimeSelectionDTO
from visier_platform_sdk.models.relative_time_shift_dto import RelativeTimeShiftDTO
from typing import Optional, Set
from typing_extensions import Self

class RelativeTimeExpressionDTO(BaseModel):
    """
    RelativeTimeExpressionDTO
    """ # noqa: E501
    anchor: Optional[StrictStr] = None
    time_selection: Optional[RelativeTimeSelectionDTO] = Field(default=None, alias="timeSelection")
    time_shift: Optional[RelativeTimeShiftDTO] = Field(default=None, alias="timeShift")
    __properties: ClassVar[List[str]] = ["anchor", "timeSelection", "timeShift"]

    @field_validator('anchor')
    def anchor_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INTERVAL_START', 'INTERVAL_END']):
            raise ValueError("must be one of enum values ('INTERVAL_START', 'INTERVAL_END')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RelativeTimeExpressionDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of time_selection
        if self.time_selection:
            _dict['timeSelection'] = self.time_selection.to_dict()
        # override the default output from pydantic by calling `to_dict()` of time_shift
        if self.time_shift:
            _dict['timeShift'] = self.time_shift.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RelativeTimeExpressionDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "anchor": obj.get("anchor"),
            "timeSelection": RelativeTimeSelectionDTO.from_dict(obj["timeSelection"]) if obj.get("timeSelection") is not None else None,
            "timeShift": RelativeTimeShiftDTO.from_dict(obj["timeShift"]) if obj.get("timeShift") is not None else None
        })
        return _obj


