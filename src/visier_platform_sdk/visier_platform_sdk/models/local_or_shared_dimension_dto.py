# coding: utf-8

"""
    API Reference

    Detailed API reference documentation for Visier APIs. Includes all endpoints, headers, path parameters, query parameters, request body schema, response schema, JSON request samples, and JSON response samples.

    The version of the OpenAPI document: 22222222.99201.2027
    Contact: alpine@visier.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from visier_platform_sdk.models.dimension_reference_dto import DimensionReferenceDTO
from visier_platform_sdk.models.v2_dimension_dto import V2DimensionDTO
from typing import Optional, Set
from typing_extensions import Self

class LocalOrSharedDimensionDTO(BaseModel):
    """
    Whether a dimension is local (not shared) or shared. Shared dimensions can be associated with more than one analytic object. Local dimensions can only be associated with one analytic object.
    """ # noqa: E501
    local: Optional[V2DimensionDTO] = Field(default=None, description="A local (not shared) dimension that is associated with one analytic object and cannot be shared with other objects.")
    shared: Optional[DimensionReferenceDTO] = Field(default=None, description="A reference to a shared dimension that is associated with one or more objects.")
    __properties: ClassVar[List[str]] = ["local", "shared"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LocalOrSharedDimensionDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of local
        if self.local:
            _dict['local'] = self.local.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shared
        if self.shared:
            _dict['shared'] = self.shared.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LocalOrSharedDimensionDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "local": V2DimensionDTO.from_dict(obj["local"]) if obj.get("local") is not None else None,
            "shared": DimensionReferenceDTO.from_dict(obj["shared"]) if obj.get("shared") is not None else None
        })
        return _obj


