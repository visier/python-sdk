# coding: utf-8

"""
    API Reference

    Detailed API reference documentation for Visier APIs. Includes all endpoints, headers, path parameters, query parameters, request body schema, response schema, JSON request samples, and JSON response samples.

    The version of the OpenAPI document: 22222222.99201.2046
    Contact: alpine@visier.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from visier_platform_sdk.models.consolidate_action_payload import ConsolidateActionPayload
from typing import Optional, Set
from typing_extensions import Self

class PlanPatchConsolidateActionRequest(BaseModel):
    """
    PlanPatchConsolidateActionRequest
    """ # noqa: E501
    action_type: StrictStr = Field(description="The action to perform on the subplan. Valid values: - `Consolidate`: Combine the submitted subplan values into the main plan. - `Reopen`: Reopen consolidated subplans so subplanners can change the values. ", alias="actionType")
    consolidate_action_payload: ConsolidateActionPayload = Field(alias="consolidateActionPayload")
    __properties: ClassVar[List[str]] = ["actionType", "consolidateActionPayload"]

    @field_validator('action_type')
    def action_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Consolidate']):
            raise ValueError("must be one of enum values ('Consolidate')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlanPatchConsolidateActionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of consolidate_action_payload
        if self.consolidate_action_payload:
            _dict['consolidateActionPayload'] = self.consolidate_action_payload.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlanPatchConsolidateActionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actionType": obj.get("actionType"),
            "consolidateActionPayload": ConsolidateActionPayload.from_dict(obj["consolidateActionPayload"]) if obj.get("consolidateActionPayload") is not None else None
        })
        return _obj


