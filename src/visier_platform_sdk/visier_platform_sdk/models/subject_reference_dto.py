# coding: utf-8

"""
    API Reference

    Detailed API reference documentation for Visier APIs. Includes all endpoints, headers, path parameters, query parameters, request body schema, response schema, JSON request samples, and JSON response samples.

    The version of the OpenAPI document: 22222222.99201.2046
    Contact: alpine@visier.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from visier_platform_sdk.models.basic_information_dto import BasicInformationDTO
from visier_platform_sdk.models.tag_reference_list_dto import TagReferenceListDTO
from typing import Optional, Set
from typing_extensions import Self

class SubjectReferenceDTO(BaseModel):
    """
    Information about forward or reverse references between analytic objects.
    """ # noqa: E501
    uuid: Optional[StrictStr] = Field(default=None, description="The UUID of the reference.")
    object_name: Optional[StrictStr] = Field(default=None, description="The object name of the reference.", alias="objectName")
    basic_information: Optional[BasicInformationDTO] = Field(default=None, description="Fields that identify and describe the analytic object, such as its display name, description, and explanation.", alias="basicInformation")
    tag_list: Optional[TagReferenceListDTO] = Field(default=None, description="A list of tags assigned to the object.", alias="tagList")
    direction: Optional[StrictStr] = Field(default=None, description="The direction of the reference between analytic objects.  - `reverse`: The reference direction is `reverse`. For example, the object reference comes from Employee.  - `forward`: The reference direction is `forward`. For example, the object references to Employee.")
    subject: Optional[StrictStr] = Field(default=None, description="The subject that the reference is associated with.")
    binding: Optional[StrictBool] = Field(default=None, description="If `true`, the reference is binding. A binding reference requires a value in the reference subject; for example, the reference between Applicant and Requisition is binding, meaning that applicants must always have an associated Requisition ID. If `false`, the reference is non-binding. A non-binding reference doesn't require a value in the reference subject; for example, the reference between Employee and Applicant is non-binding, meaning that an employee does not require an associated Applicant ID. This is the default and expected behavior for most references.")
    __properties: ClassVar[List[str]] = ["uuid", "objectName", "basicInformation", "tagList", "direction", "subject", "binding"]

    @field_validator('direction')
    def direction_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['forward', 'reverse']):
            raise ValueError("must be one of enum values ('forward', 'reverse')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubjectReferenceDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of basic_information
        if self.basic_information:
            _dict['basicInformation'] = self.basic_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tag_list
        if self.tag_list:
            _dict['tagList'] = self.tag_list.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubjectReferenceDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uuid": obj.get("uuid"),
            "objectName": obj.get("objectName"),
            "basicInformation": BasicInformationDTO.from_dict(obj["basicInformation"]) if obj.get("basicInformation") is not None else None,
            "tagList": TagReferenceListDTO.from_dict(obj["tagList"]) if obj.get("tagList") is not None else None,
            "direction": obj.get("direction"),
            "subject": obj.get("subject"),
            "binding": obj.get("binding")
        })
        return _obj


