# coding: utf-8

"""
    API Reference

    Detailed API reference documentation for Visier APIs. Includes all endpoints, headers, path parameters, query parameters, request body schema, response schema, JSON request samples, and JSON response samples.

    The version of the OpenAPI document: 22222222.99201.2046
    Contact: alpine@visier.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from visier_platform_sdk.models.aggregate_query_execution_options_dto import AggregateQueryExecutionOptionsDTO
from visier_platform_sdk.models.list_query_execution_options_dto import ListQueryExecutionOptionsDTO
from typing import Optional, Set
from typing_extensions import Self

class SqlLikeQueryExecutionDTO(BaseModel):
    """
    *  Request body for SQL-like query executions, which can be either an aggregate or list query.  For examples that distinguish between aggregate and list queries, see the `POST /v1/data/query/sql` description.
    """ # noqa: E501
    query: Optional[StrictStr] = Field(default=None, description="The SQL-like query string")
    options: Optional[AggregateQueryExecutionOptionsDTO] = Field(default=None, description="This will be removed as of Spring 2026. Use `aggregateQueryOptions` instead.  If both `options` and `aggregateQueryOptions` are specified, `aggregateQueryOptions` takes precedence.   Optional aggregate query options.  **Note**: `enableDescendingSpace` is not supported in SQL-like aggregate queries.")
    aggregate_query_options: Optional[AggregateQueryExecutionOptionsDTO] = Field(default=None, description="Options to apply to a SQL-like aggregate query. The query is aggregate if it contains at least one metric.  **Note**: `enableDescendingSpace` is not supported in SQL-like aggregate queries.", alias="aggregateQueryOptions")
    list_query_options: Optional[ListQueryExecutionOptionsDTO] = Field(default=None, description="Options to apply to a SQL-like list query. The query is list if it contains no metrics and has only properties.  **Note**: `multipleTables` is not supported in SQL-like list queries.", alias="listQueryOptions")
    __properties: ClassVar[List[str]] = ["query", "options", "aggregateQueryOptions", "listQueryOptions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SqlLikeQueryExecutionDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of options
        if self.options:
            _dict['options'] = self.options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of aggregate_query_options
        if self.aggregate_query_options:
            _dict['aggregateQueryOptions'] = self.aggregate_query_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of list_query_options
        if self.list_query_options:
            _dict['listQueryOptions'] = self.list_query_options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SqlLikeQueryExecutionDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "query": obj.get("query"),
            "options": AggregateQueryExecutionOptionsDTO.from_dict(obj["options"]) if obj.get("options") is not None else None,
            "aggregateQueryOptions": AggregateQueryExecutionOptionsDTO.from_dict(obj["aggregateQueryOptions"]) if obj.get("aggregateQueryOptions") is not None else None,
            "listQueryOptions": ListQueryExecutionOptionsDTO.from_dict(obj["listQueryOptions"]) if obj.get("listQueryOptions") is not None else None
        })
        return _obj


