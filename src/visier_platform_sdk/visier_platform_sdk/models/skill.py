# coding: utf-8

"""
    API Reference

    Detailed API reference documentation for Visier APIs. Includes all endpoints, headers, path parameters, query parameters, request body schema, response schema, JSON request samples, and JSON response samples.

    The version of the OpenAPI document: 22222222.99201.1914
    Contact: alpine@visier.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Skill(BaseModel):
    """
    The details describing a skill. 
    """ # noqa: E501
    id: StrictStr = Field(description="The unique ID of the skill. ")
    name: StrictStr = Field(description="The localized display name of the skill. ")
    description: StrictStr = Field(description="The localized description of the skill. ")
    skill_group_id: StrictStr = Field(description="ID of the skill group that this skill belongs to. ", alias="skillGroupId")
    skill_category_id: StrictStr = Field(description="ID of the skill category that this skill belongs to.  ", alias="skillCategoryId")
    is_knowledge: StrictBool = Field(description="Indicates whether the skill is a knowledge skill. ", alias="isKnowledge")
    skill_type: StrictStr = Field(description="The type of skill. Valid values are `Soft`, `Hard`, and `Unknown`. ", alias="skillType")
    alternative_titles: List[StrictStr] = Field(description="List of alternative localized names for this skill. ", alias="alternativeTitles")
    remote_index: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The Remote Index represents how readily a skill can be done through remote work. The index ranges from 0 to 100, where a value of 100 means the skill can be done entirely remotely.  This field will be omitted if remotability is not applicable to the skill. ", alias="remoteIndex")
    automation_index: Optional[StrictInt] = Field(default=None, description="The Automation Index represents how readily a skill can be automated. The index ranges from 0 to 100, where a value of 100 means the skill is completely automatable.  This field will be omitted if automation is not applicable to the skill. ", alias="automationIndex")
    __properties: ClassVar[List[str]] = ["id", "name", "description", "skillGroupId", "skillCategoryId", "isKnowledge", "skillType", "alternativeTitles", "remoteIndex", "automationIndex"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Skill from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Skill from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "skillGroupId": obj.get("skillGroupId"),
            "skillCategoryId": obj.get("skillCategoryId"),
            "isKnowledge": obj.get("isKnowledge"),
            "skillType": obj.get("skillType"),
            "alternativeTitles": obj.get("alternativeTitles"),
            "remoteIndex": obj.get("remoteIndex"),
            "automationIndex": obj.get("automationIndex")
        })
        return _obj


