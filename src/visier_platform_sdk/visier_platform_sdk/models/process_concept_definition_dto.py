# coding: utf-8

"""
    API Reference

    Detailed API reference documentation for Visier APIs. Includes all endpoints, headers, path parameters, query parameters, request body schema, response schema, JSON request samples, and JSON response samples.

    The version of the OpenAPI document: 22222222.99200.21494
    Contact: alpine@visier.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from visier_platform_sdk.models.process_concept_metric_list_dto import ProcessConceptMetricListDTO
from visier_platform_sdk.models.process_concept_outcome_list_dto import ProcessConceptOutcomeListDTO
from visier_platform_sdk.models.process_concept_property_list_dto import ProcessConceptPropertyListDTO
from visier_platform_sdk.models.process_concept_stage_list_dto import ProcessConceptStageListDTO
from visier_platform_sdk.models.tag_reference_list_dto import TagReferenceListDTO
from typing import Optional, Set
from typing_extensions import Self

class ProcessConceptDefinitionDTO(BaseModel):
    """
    The process concept's associated objects, such as its analytic object and status dimension.
    """ # noqa: E501
    analytic_object_name: Optional[StrictStr] = Field(default=None, description="The object name of the analytic object for the process concept.", alias="analyticObjectName")
    status_dimension_object_name: Optional[StrictStr] = Field(default=None, description="The object name of the status dimension for the process concept.", alias="statusDimensionObjectName")
    participation_concept_uuid: Optional[StrictStr] = Field(default=None, description="The UUID of the participation concept for the process concept.", alias="participationConceptUuid")
    on_hold_concept_uuid: Optional[StrictStr] = Field(default=None, description="The UUID of the on-hold concept for the process concept.", alias="onHoldConceptUuid")
    stage_list: Optional[ProcessConceptStageListDTO] = Field(default=None, description="The process concept's stages.", alias="stageList")
    outcome_list: Optional[ProcessConceptOutcomeListDTO] = Field(default=None, description="The process concept's outcomes.", alias="outcomeList")
    metric_list: Optional[ProcessConceptMetricListDTO] = Field(default=None, description="The process concept's associated metrics.", alias="metricList")
    property_list: Optional[ProcessConceptPropertyListDTO] = Field(default=None, description="The process concept's associated properties.", alias="propertyList")
    tag_list: Optional[TagReferenceListDTO] = Field(default=None, description="The tags assigned to the object.", alias="tagList")
    visible_in_analytics: Optional[StrictBool] = Field(default=None, description="If `true`, the object is visible to end users in the solution.", alias="visibleInAnalytics")
    include_with_vee: Optional[StrictBool] = Field(default=None, description="If `true`, the object is available in Vee's responses.", alias="includeWithVee")
    __properties: ClassVar[List[str]] = ["analyticObjectName", "statusDimensionObjectName", "participationConceptUuid", "onHoldConceptUuid", "stageList", "outcomeList", "metricList", "propertyList", "tagList", "visibleInAnalytics", "includeWithVee"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProcessConceptDefinitionDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of stage_list
        if self.stage_list:
            _dict['stageList'] = self.stage_list.to_dict()
        # override the default output from pydantic by calling `to_dict()` of outcome_list
        if self.outcome_list:
            _dict['outcomeList'] = self.outcome_list.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metric_list
        if self.metric_list:
            _dict['metricList'] = self.metric_list.to_dict()
        # override the default output from pydantic by calling `to_dict()` of property_list
        if self.property_list:
            _dict['propertyList'] = self.property_list.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tag_list
        if self.tag_list:
            _dict['tagList'] = self.tag_list.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProcessConceptDefinitionDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "analyticObjectName": obj.get("analyticObjectName"),
            "statusDimensionObjectName": obj.get("statusDimensionObjectName"),
            "participationConceptUuid": obj.get("participationConceptUuid"),
            "onHoldConceptUuid": obj.get("onHoldConceptUuid"),
            "stageList": ProcessConceptStageListDTO.from_dict(obj["stageList"]) if obj.get("stageList") is not None else None,
            "outcomeList": ProcessConceptOutcomeListDTO.from_dict(obj["outcomeList"]) if obj.get("outcomeList") is not None else None,
            "metricList": ProcessConceptMetricListDTO.from_dict(obj["metricList"]) if obj.get("metricList") is not None else None,
            "propertyList": ProcessConceptPropertyListDTO.from_dict(obj["propertyList"]) if obj.get("propertyList") is not None else None,
            "tagList": TagReferenceListDTO.from_dict(obj["tagList"]) if obj.get("tagList") is not None else None,
            "visibleInAnalytics": obj.get("visibleInAnalytics"),
            "includeWithVee": obj.get("includeWithVee")
        })
        return _obj


