# coding: utf-8

"""
    API Reference

    Detailed API reference documentation for Visier APIs. Includes all endpoints, headers, path parameters, query parameters, request body schema, response schema, JSON request samples, and JSON response samples.

    The version of the OpenAPI document: 22222222.99201.2046
    Contact: alpine@visier.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class VersionInformationDTO(BaseModel):
    """
    The object's version information. Version information is read-only. It indicates where the object originates from and whether the object has been modified in your tenant.
    """ # noqa: E501
    version_type: Optional[StrictStr] = Field(default=None, description="Indicates where the object originates from and whether the object has been modified. Valid values:  - `Unknown`: The source is not known.  - `BP`: The object originates from Visier's Blueprint and is not changed at the tenant level.  - `Tenant`: The object only exists in the tenant and doesn't exist in Visier's Blueprint.  - `TenantOverride`: The object originates from Visier's Blueprint and is changed at the tenant level.  - `TenantShared`: The object is non-versioned, only exists in the tenant and doesnâ€™t exist in Visier's Blueprint, and is shareable with other users in the tenant.  - `Draft`: The object only exists in the specified draft project.", alias="versionType")
    edited: Optional[StrictStr] = Field(default=None, description="The UTC time of the latest change in ISO 8601 format. For example, `2023-10-01T12:00:00Z`.")
    editor: Optional[StrictStr] = Field(default=None, description="The user who made the latest change.")
    __properties: ClassVar[List[str]] = ["versionType", "edited", "editor"]

    @field_validator('version_type')
    def version_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Unknown', 'BP', 'Tenant', 'TenantOverride', 'TenantShared', 'Draft']):
            raise ValueError("must be one of enum values ('Unknown', 'BP', 'Tenant', 'TenantOverride', 'TenantShared', 'Draft')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VersionInformationDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VersionInformationDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "versionType": obj.get("versionType"),
            "edited": obj.get("edited"),
            "editor": obj.get("editor")
        })
        return _obj


