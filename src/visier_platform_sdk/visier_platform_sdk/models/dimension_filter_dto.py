# coding: utf-8

"""
    API Reference

    Detailed API reference documentation for Visier APIs. Includes all endpoints, headers, path parameters, query parameters, request body schema, response schema, JSON request samples, and JSON response samples.

    The version of the OpenAPI document: 22222222.99201.2046
    Contact: alpine@visier.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from visier_platform_sdk.models.member_selection_dto import MemberSelectionDTO
from typing import Optional, Set
from typing_extensions import Self

class DimensionFilterDTO(BaseModel):
    """
    A dimension associated with the selection concept.
    """ # noqa: E501
    dimension_name: Optional[StrictStr] = Field(default=None, description="The dimension object name.", alias="dimensionName")
    qualifying_path: Optional[List[StrictStr]] = Field(default=None, description="The objects that qualify the path to the dimension from its parent analytic object. For example, let's say the analytic object is `Applicant` and the dimension is `Location`.  To get to `Location` from `Applicant` there are multiple paths, one of which is to follow references `Requisition` and then `Hiring Manager` to `Location`.  `Location` is available on `Hiring_Manager` because a hiring manager is an `Employee`. In this example, the qualifying path is `[ \"Applicant.Requisition\" , \"Requisition.Hiring_Manager\" ]`.", alias="qualifyingPath")
    member_selections: Optional[List[MemberSelectionDTO]] = Field(default=None, description="The dimension members in a member selection concept.", alias="memberSelections")
    is_excluded: Optional[StrictBool] = Field(default=None, description="If `true`, the member is excluded from the concept. Default is `false`.", alias="isExcluded")
    __properties: ClassVar[List[str]] = ["dimensionName", "qualifyingPath", "memberSelections", "isExcluded"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DimensionFilterDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in member_selections (list)
        _items = []
        if self.member_selections:
            for _item_member_selections in self.member_selections:
                if _item_member_selections:
                    _items.append(_item_member_selections.to_dict())
            _dict['memberSelections'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DimensionFilterDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dimensionName": obj.get("dimensionName"),
            "qualifyingPath": obj.get("qualifyingPath"),
            "memberSelections": [MemberSelectionDTO.from_dict(_item) for _item in obj["memberSelections"]] if obj.get("memberSelections") is not None else None,
            "isExcluded": obj.get("isExcluded")
        })
        return _obj


