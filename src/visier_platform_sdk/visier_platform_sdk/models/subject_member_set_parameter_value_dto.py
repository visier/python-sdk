# coding: utf-8

"""
    API Reference

    Detailed API reference documentation for Visier APIs. Includes all endpoints, headers, path parameters, query parameters, request body schema, response schema, JSON request samples, and JSON response samples.

    The version of the OpenAPI document: 22222222.99201.2176
    Contact: alpine@visier.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from visier_platform_sdk.models.subject_member_set_parameter_value_dto_list_of_name_path_dto import SubjectMemberSetParameterValueDTOListOfNamePathDTO
from visier_platform_sdk.models.subject_member_set_parameter_value_dto_name_path_dto import SubjectMemberSetParameterValueDTONamePathDTO
from typing import Optional, Set
from typing_extensions import Self

class SubjectMemberSetParameterValueDTO(BaseModel):
    """
    The value for a subject member set parameter.
    """ # noqa: E501
    parameter_id: Optional[StrictStr] = Field(default=None, description="The unique ID of the subject member set parameter.", alias="parameterId")
    key_name_paths: Optional[List[SubjectMemberSetParameterValueDTONamePathDTO]] = Field(default=None, description="The name path keys for the subject member set parameter; for example, `[\"Java\"]`.", alias="keyNamePaths")
    value_name_paths: Optional[List[SubjectMemberSetParameterValueDTOListOfNamePathDTO]] = Field(default=None, description="The name path values for each subject member set parameter key; for example, `[\"5.0\"]`.", alias="valueNamePaths")
    __properties: ClassVar[List[str]] = ["parameterId", "keyNamePaths", "valueNamePaths"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubjectMemberSetParameterValueDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in key_name_paths (list)
        _items = []
        if self.key_name_paths:
            for _item_key_name_paths in self.key_name_paths:
                if _item_key_name_paths:
                    _items.append(_item_key_name_paths.to_dict())
            _dict['keyNamePaths'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in value_name_paths (list)
        _items = []
        if self.value_name_paths:
            for _item_value_name_paths in self.value_name_paths:
                if _item_value_name_paths:
                    _items.append(_item_value_name_paths.to_dict())
            _dict['valueNamePaths'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubjectMemberSetParameterValueDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "parameterId": obj.get("parameterId"),
            "keyNamePaths": [SubjectMemberSetParameterValueDTONamePathDTO.from_dict(_item) for _item in obj["keyNamePaths"]] if obj.get("keyNamePaths") is not None else None,
            "valueNamePaths": [SubjectMemberSetParameterValueDTOListOfNamePathDTO.from_dict(_item) for _item in obj["valueNamePaths"]] if obj.get("valueNamePaths") is not None else None
        })
        return _obj


