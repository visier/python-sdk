# coding: utf-8

"""
    API Reference

    Detailed API reference documentation for Visier APIs. Includes all endpoints, headers, path parameters, query parameters, request body schema, response schema, JSON request samples, and JSON response samples.

    The version of the OpenAPI document: 22222222.99201.2027
    Contact: alpine@visier.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from visier_platform_sdk.models.caption_dto import CaptionDTO
from visier_platform_sdk.models.caption_list_dto import CaptionListDTO
from visier_platform_sdk.models.concept_reference_list_dto import ConceptReferenceListDTO
from visier_platform_sdk.models.local_or_shared_dimension_list_dto import LocalOrSharedDimensionListDTO
from visier_platform_sdk.models.property_definition_list_dto import PropertyDefinitionListDTO
from visier_platform_sdk.models.subject_reference_list_dto import SubjectReferenceListDTO
from typing import Optional, Set
from typing_extensions import Self

class EventDetailsDTO(BaseModel):
    """
    Information about the event, such as its subject, default metric, and attributes.
    """ # noqa: E501
    occurrence_caption: Optional[CaptionDTO] = Field(default=None, description="The property that labels occurrences. The occurrence caption displays the property in Detailed View and makes the event available in the Compare room.", alias="occurrenceCaption")
    secondary_caption_list: Optional[CaptionListDTO] = Field(default=None, description="Secondary captions for additional identification of event occurrences.", alias="secondaryCaptionList")
    subject: Optional[StrictStr] = Field(default=None, description="The subject that the event is associated with. Subjects are entities that evolve over time with attributes captured over time.")
    enable_ending_event: Optional[StrictBool] = Field(default=None, description="If `true`, this event causes the record to become nonactive.", alias="enableEndingEvent")
    default_metric: Optional[StrictStr] = Field(default=None, description="The default metric associated with an analytic object for system alerts and preventing empty chart states.", alias="defaultMetric")
    data_category: Optional[StrictStr] = Field(default=None, description="The data category for this analytic object. Options include Tenant (default) and Usage (processes Visier usage information).", alias="dataCategory")
    enable_end_data: Optional[StrictBool] = Field(default=None, description="If `true`, the event's end date corresponds with the event table's metadata. If `false`, the event's end date is inherited from its associated subject.", alias="enableEndData")
    include_with_vee: Optional[StrictBool] = Field(default=None, description="If `true`, the object is available in Vee's responses.", alias="includeWithVee")
    property_list: Optional[PropertyDefinitionListDTO] = Field(default=None, description="The event's properties, such as event ID, name, and date.", alias="propertyList")
    dimension_list: Optional[LocalOrSharedDimensionListDTO] = Field(default=None, description="The event's dimensions, such as event type, location, and time.", alias="dimensionList")
    concept_list: Optional[ConceptReferenceListDTO] = Field(default=None, description="The event's concepts, such as process stages and their stages or outcomes.", alias="conceptList")
    subject_reference_list: Optional[SubjectReferenceListDTO] = Field(default=None, description="The analytic object's references.", alias="subjectReferenceList")
    __properties: ClassVar[List[str]] = ["occurrenceCaption", "secondaryCaptionList", "subject", "enableEndingEvent", "defaultMetric", "dataCategory", "enableEndData", "includeWithVee", "propertyList", "dimensionList", "conceptList", "subjectReferenceList"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EventDetailsDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of occurrence_caption
        if self.occurrence_caption:
            _dict['occurrenceCaption'] = self.occurrence_caption.to_dict()
        # override the default output from pydantic by calling `to_dict()` of secondary_caption_list
        if self.secondary_caption_list:
            _dict['secondaryCaptionList'] = self.secondary_caption_list.to_dict()
        # override the default output from pydantic by calling `to_dict()` of property_list
        if self.property_list:
            _dict['propertyList'] = self.property_list.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dimension_list
        if self.dimension_list:
            _dict['dimensionList'] = self.dimension_list.to_dict()
        # override the default output from pydantic by calling `to_dict()` of concept_list
        if self.concept_list:
            _dict['conceptList'] = self.concept_list.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subject_reference_list
        if self.subject_reference_list:
            _dict['subjectReferenceList'] = self.subject_reference_list.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EventDetailsDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "occurrenceCaption": CaptionDTO.from_dict(obj["occurrenceCaption"]) if obj.get("occurrenceCaption") is not None else None,
            "secondaryCaptionList": CaptionListDTO.from_dict(obj["secondaryCaptionList"]) if obj.get("secondaryCaptionList") is not None else None,
            "subject": obj.get("subject"),
            "enableEndingEvent": obj.get("enableEndingEvent"),
            "defaultMetric": obj.get("defaultMetric"),
            "dataCategory": obj.get("dataCategory"),
            "enableEndData": obj.get("enableEndData"),
            "includeWithVee": obj.get("includeWithVee"),
            "propertyList": PropertyDefinitionListDTO.from_dict(obj["propertyList"]) if obj.get("propertyList") is not None else None,
            "dimensionList": LocalOrSharedDimensionListDTO.from_dict(obj["dimensionList"]) if obj.get("dimensionList") is not None else None,
            "conceptList": ConceptReferenceListDTO.from_dict(obj["conceptList"]) if obj.get("conceptList") is not None else None,
            "subjectReferenceList": SubjectReferenceListDTO.from_dict(obj["subjectReferenceList"]) if obj.get("subjectReferenceList") is not None else None
        })
        return _obj


