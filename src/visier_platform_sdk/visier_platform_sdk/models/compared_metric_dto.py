# coding: utf-8

"""
    API Reference

    Detailed API reference documentation for Visier APIs. Includes all endpoints, headers, path parameters, query parameters, request body schema, response schema, JSON request samples, and JSON response samples.

    The version of the OpenAPI document: 22222222.99201.2165
    Contact: alpine@visier.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from visier_platform_sdk.models.other_metric_dto import OtherMetricDTO
from visier_platform_sdk.models.same_metric_other_context_dto import SameMetricOtherContextDTO
from visier_platform_sdk.models.same_metric_other_time_dto import SameMetricOtherTimeDTO
from typing import Optional, Set
from typing_extensions import Self

class ComparedMetricDTO(BaseModel):
    """
    Whether to trigger the alert when the metric value is compared to a time period, another metric, or a group.
    """ # noqa: E501
    no_comparison: Optional[Dict[str, Any]] = Field(default=None, description="Do not compare the metric value to anything but its own value.", alias="noComparison")
    same_metric_other_context: Optional[SameMetricOtherContextDTO] = Field(default=None, description="Compare the metric against a group; for example, High Performers.", alias="sameMetricOtherContext")
    same_metric_other_time: Optional[SameMetricOtherTimeDTO] = Field(default=None, description="Compare the metric against a time period; for example, the previous period or the same period of the previous year.", alias="sameMetricOtherTime")
    other_metric: Optional[OtherMetricDTO] = Field(default=None, description="Compare the metric against a different metric; for example, a Visier Benchmarks metric.", alias="otherMetric")
    __properties: ClassVar[List[str]] = ["noComparison", "sameMetricOtherContext", "sameMetricOtherTime", "otherMetric"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ComparedMetricDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of same_metric_other_context
        if self.same_metric_other_context:
            _dict['sameMetricOtherContext'] = self.same_metric_other_context.to_dict()
        # override the default output from pydantic by calling `to_dict()` of same_metric_other_time
        if self.same_metric_other_time:
            _dict['sameMetricOtherTime'] = self.same_metric_other_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of other_metric
        if self.other_metric:
            _dict['otherMetric'] = self.other_metric.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ComparedMetricDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "noComparison": obj.get("noComparison"),
            "sameMetricOtherContext": SameMetricOtherContextDTO.from_dict(obj["sameMetricOtherContext"]) if obj.get("sameMetricOtherContext") is not None else None,
            "sameMetricOtherTime": SameMetricOtherTimeDTO.from_dict(obj["sameMetricOtherTime"]) if obj.get("sameMetricOtherTime") is not None else None,
            "otherMetric": OtherMetricDTO.from_dict(obj["otherMetric"]) if obj.get("otherMetric") is not None else None
        })
        return _obj


