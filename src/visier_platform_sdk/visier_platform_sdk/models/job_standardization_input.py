# coding: utf-8

"""
    API Reference

    Detailed API reference documentation for Visier APIs. Includes all endpoints, headers, path parameters, query parameters, request body schema, response schema, JSON request samples, and JSON response samples.

    The version of the OpenAPI document: 22222222.99201.2047
    Contact: alpine@visier.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class JobStandardizationInput(BaseModel):
    """
    The custom job titles to standardize. 
    """ # noqa: E501
    terms: List[StrictStr] = Field(description="A list of input search terms. The job members that are the most semantically similar to the search term are returned with the most relevant job members displayed first.  Your search term may not be included in the results as semantic search goes beyond keyword matching and attempts to interpret the meaning behind the query to provide search results.  The maximum number of search terms is 30.  For the individual search term, the minimum length is 2 characters and the maximum length is 100 characters. ")
    naics_code: Optional[StrictStr] = Field(default=None, description="The North American Industry Classification System (NAICS) code.  If `naicsCode` is provided, the most relevant job titles associated with the naicsCode are returned first. ", alias="naicsCode")
    num_matches: Optional[StrictInt] = Field(default=5, description="The number of top matches to retrieve. ", alias="numMatches")
    semantic_only: Optional[StrictBool] = Field(default=False, description="If `true`, only semantic search will be used to find matches. Ensure the parameter `lexicalOnly` is set to `false`. Default is `false`. By default, both semantic and lexical search are used to find matches. ", alias="semanticOnly")
    lexical_only: Optional[StrictBool] = Field(default=False, description="If `true`, only lexical search will be used to find matches. Ensure the parameter `semanticOnly` is set to `false`. Default is `false`. By default, both semantic and lexical search are used to find matches. ", alias="lexicalOnly")
    typical_titles_search: Optional[StrictBool] = Field(default=False, description="If `true`, similar job titles for a job member are included in the lexical search for matches. Default is `false`. ", alias="typicalTitlesSearch")
    __properties: ClassVar[List[str]] = ["terms", "naicsCode", "numMatches", "semanticOnly", "lexicalOnly", "typicalTitlesSearch"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JobStandardizationInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JobStandardizationInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "terms": obj.get("terms"),
            "naicsCode": obj.get("naicsCode"),
            "numMatches": obj.get("numMatches") if obj.get("numMatches") is not None else 5,
            "semanticOnly": obj.get("semanticOnly") if obj.get("semanticOnly") is not None else False,
            "lexicalOnly": obj.get("lexicalOnly") if obj.get("lexicalOnly") is not None else False,
            "typicalTitlesSearch": obj.get("typicalTitlesSearch") if obj.get("typicalTitlesSearch") is not None else False
        })
        return _obj


