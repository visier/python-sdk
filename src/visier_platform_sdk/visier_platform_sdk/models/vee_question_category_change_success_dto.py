# coding: utf-8

"""
    API Reference

    Detailed API reference documentation for Visier APIs. Includes all endpoints, headers, path parameters, query parameters, request body schema, response schema, JSON request samples, and JSON response samples.

    The version of the OpenAPI document: 22222222.99201.2205
    Contact: alpine@visier.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from visier_platform_sdk.models.category_icon_dto import CategoryIconDTO
from typing import Optional, Set
from typing_extensions import Self

class VeeQuestionCategoryChangeSuccessDTO(BaseModel):
    """
    The list of successful changes.
    """ # noqa: E501
    display_name: Optional[StrictStr] = Field(default=None, description="The name in plain language that was successfully changed.", alias="displayName")
    category_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the question category that was successfully changed.", alias="categoryId")
    category_icon: Optional[CategoryIconDTO] = Field(default=None, description="The question category icons that were successfully changed.", alias="categoryIcon")
    tenant_code: Optional[StrictStr] = Field(default=None, description="The tenant that the question category was changed in.", alias="tenantCode")
    project_id: Optional[StrictStr] = Field(default=None, description="The project that the question category was changed in.", alias="projectId")
    __properties: ClassVar[List[str]] = ["displayName", "categoryId", "categoryIcon", "tenantCode", "projectId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VeeQuestionCategoryChangeSuccessDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of category_icon
        if self.category_icon:
            _dict['categoryIcon'] = self.category_icon.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VeeQuestionCategoryChangeSuccessDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "displayName": obj.get("displayName"),
            "categoryId": obj.get("categoryId"),
            "categoryIcon": CategoryIconDTO.from_dict(obj["categoryIcon"]) if obj.get("categoryIcon") is not None else None,
            "tenantCode": obj.get("tenantCode"),
            "projectId": obj.get("projectId")
        })
        return _obj


