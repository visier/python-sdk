# coding: utf-8

"""
    API Reference

    Detailed API reference documentation for Visier APIs. Includes all endpoints, headers, path parameters, query parameters, request body schema, response schema, JSON request samples, and JSON response samples.

    The version of the OpenAPI document: 22222222.99200.21550
    Contact: alpine@visier.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from visier_platform_sdk.models.dimension_reference_dto import DimensionReferenceDTO
from typing import Optional, Set
from typing_extensions import Self

class QueryDimensionLevelPropertyDTO(BaseModel):
    """
    A QueryDimensionLevelPropertyDTO defines an existing dimension level and its dimension to query.
    """ # noqa: E501
    dimension: Optional[DimensionReferenceDTO] = Field(default=None, description="A dimension and its qualifying path to query.")
    member_value_mode: Optional[StrictStr] = Field(default=None, description="Controls how to display member values.   Valid values are `NAME`, `PATH`.   * `NAME`: Returns the member's display name. This is the default.  * `PATH`: Returns the member's name path.", alias="memberValueMode")
    level_id: Optional[StrictStr] = Field(default=None, description="The level ID. For example, \"Level_1\" or \"Level_2\".", alias="levelId")
    level_depth: Optional[StrictInt] = Field(default=None, description="The level depth. For a parent-child dimension, depth must be greater than 0. For example, 1 or 2.", alias="levelDepth")
    __properties: ClassVar[List[str]] = ["dimension", "memberValueMode", "levelId", "levelDepth"]

    @field_validator('member_value_mode')
    def member_value_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NAME', 'PATH']):
            raise ValueError("must be one of enum values ('NAME', 'PATH')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QueryDimensionLevelPropertyDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of dimension
        if self.dimension:
            _dict['dimension'] = self.dimension.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QueryDimensionLevelPropertyDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dimension": DimensionReferenceDTO.from_dict(obj["dimension"]) if obj.get("dimension") is not None else None,
            "memberValueMode": obj.get("memberValueMode"),
            "levelId": obj.get("levelId"),
            "levelDepth": obj.get("levelDepth")
        })
        return _obj


