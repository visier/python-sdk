# coding: utf-8

"""
    API Reference

    Detailed API reference documentation for Visier APIs. Includes all endpoints, headers, path parameters, query parameters, request body schema, response schema, JSON request samples, and JSON response samples.

    The version of the OpenAPI document: 22222222.99200.21550
    Contact: alpine@visier.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from visier_platform_sdk.models.failed_local_tenant_profile_assignment_dto import FailedLocalTenantProfileAssignmentDTO
from visier_platform_sdk.models.successful_local_tenant_profile_assignment_dto import SuccessfulLocalTenantProfileAssignmentDTO
from visier_platform_sdk.models.user_id_error_dto import UserIdErrorDTO
from typing import Optional, Set
from typing_extensions import Self

class LocalTenantProfileAssignmentResponseDTO(BaseModel):
    """
    LocalTenantProfileAssignmentResponseDTO
    """ # noqa: E501
    errors: Optional[StrictBool] = Field(default=None, description="If true, an error was generated by the request.")
    bad_user_ids: Optional[List[UserIdErrorDTO]] = Field(default=None, description="A list of objects representing the user IDs that may not be valid.", alias="badUserIds")
    failed_assignments: Optional[List[FailedLocalTenantProfileAssignmentDTO]] = Field(default=None, description="A list of objects representing any errors that occurred during the assignment operation.", alias="failedAssignments")
    successful_assignments: Optional[List[SuccessfulLocalTenantProfileAssignmentDTO]] = Field(default=None, description="A list of the user IDs that were successfully assigned the profile.", alias="successfulAssignments")
    __properties: ClassVar[List[str]] = ["errors", "badUserIds", "failedAssignments", "successfulAssignments"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LocalTenantProfileAssignmentResponseDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in bad_user_ids (list)
        _items = []
        if self.bad_user_ids:
            for _item_bad_user_ids in self.bad_user_ids:
                if _item_bad_user_ids:
                    _items.append(_item_bad_user_ids.to_dict())
            _dict['badUserIds'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in failed_assignments (list)
        _items = []
        if self.failed_assignments:
            for _item_failed_assignments in self.failed_assignments:
                if _item_failed_assignments:
                    _items.append(_item_failed_assignments.to_dict())
            _dict['failedAssignments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in successful_assignments (list)
        _items = []
        if self.successful_assignments:
            for _item_successful_assignments in self.successful_assignments:
                if _item_successful_assignments:
                    _items.append(_item_successful_assignments.to_dict())
            _dict['successfulAssignments'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LocalTenantProfileAssignmentResponseDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "errors": obj.get("errors"),
            "badUserIds": [UserIdErrorDTO.from_dict(_item) for _item in obj["badUserIds"]] if obj.get("badUserIds") is not None else None,
            "failedAssignments": [FailedLocalTenantProfileAssignmentDTO.from_dict(_item) for _item in obj["failedAssignments"]] if obj.get("failedAssignments") is not None else None,
            "successfulAssignments": [SuccessfulLocalTenantProfileAssignmentDTO.from_dict(_item) for _item in obj["successfulAssignments"]] if obj.get("successfulAssignments") is not None else None
        })
        return _obj


