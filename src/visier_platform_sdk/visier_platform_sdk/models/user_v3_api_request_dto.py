# coding: utf-8

"""
    API Reference

    Detailed API reference documentation for Visier APIs. Includes all endpoints, headers, path parameters, query parameters, request body schema, response schema, JSON request samples, and JSON response samples.

    The version of the OpenAPI document: 22222222.99201.2047
    Contact: alpine@visier.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from visier_platform_sdk.models.profile_assignment_dto import ProfileAssignmentDTO
from typing import Optional, Set
from typing_extensions import Self

class UserV3ApiRequestDTO(BaseModel):
    """
    The updates to make to a user, or the user to create.
    """ # noqa: E501
    username: Optional[StrictStr] = Field(default=None, description="The user's username. This is typically the user's email, such as john@jupiter.com. If a user's username changes, they must authenticate using the new username.")
    display_name: Optional[StrictStr] = Field(default=None, description="An identifiable name to display within Visier. For example, \"John Smith\".", alias="displayName")
    employee_id: Optional[StrictStr] = Field(default=None, description="If applicable, and if available, the user employee ID in the data.", alias="employeeId")
    account_enabled: Optional[StrictStr] = Field(default=None, description="If true, the user account is enabled.", alias="accountEnabled")
    email: Optional[StrictStr] = Field(default=None, description="The user's email address.")
    user_group_ids: Optional[List[StrictStr]] = Field(default=None, description="The user groups to assign to the user.", alias="userGroupIds")
    permission_ids: Optional[List[StrictStr]] = Field(default=None, description="The permissions to assign to the user.", alias="permissionIds")
    profile_assignments: Optional[List[ProfileAssignmentDTO]] = Field(default=None, description="The profiles to assign to the user.", alias="profileAssignments")
    __properties: ClassVar[List[str]] = ["username", "displayName", "employeeId", "accountEnabled", "email", "userGroupIds", "permissionIds", "profileAssignments"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserV3ApiRequestDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in profile_assignments (list)
        _items = []
        if self.profile_assignments:
            for _item_profile_assignments in self.profile_assignments:
                if _item_profile_assignments:
                    _items.append(_item_profile_assignments.to_dict())
            _dict['profileAssignments'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserV3ApiRequestDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "username": obj.get("username"),
            "displayName": obj.get("displayName"),
            "employeeId": obj.get("employeeId"),
            "accountEnabled": obj.get("accountEnabled"),
            "email": obj.get("email"),
            "userGroupIds": obj.get("userGroupIds"),
            "permissionIds": obj.get("permissionIds"),
            "profileAssignments": [ProfileAssignmentDTO.from_dict(_item) for _item in obj["profileAssignments"]] if obj.get("profileAssignments") is not None else None
        })
        return _obj


