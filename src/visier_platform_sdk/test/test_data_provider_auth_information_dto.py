# coding: utf-8

"""
    API Reference

    Detailed API reference documentation for Visier APIs. Includes all endpoints, headers, path parameters, query parameters, request body schema, response schema, JSON request samples, and JSON response samples.

    The version of the OpenAPI document: 22222222.99200.21494
    Contact: alpine@visier.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

import visier_platform_sdk.models
from visier_platform_sdk.models.data_provider_auth_information_dto import DataProviderAuthInformationDTO

class TestDataProviderAuthInformationDTO(unittest.TestCase):
    """DataProviderAuthInformationDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DataProviderAuthInformationDTO:
        """Test DataProviderAuthInformationDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """

        if include_optional:
            return DataProviderAuthInformationDTO(
                data_provider_auth_params = visier_platform_sdk.models.data_provider_auth_params_dto.DataProviderAuthParamsDTO(
                    tenant_domain_name = '', 
                    provider = 'Bamboo', 
                    bamboo_auth_params = visier_platform_sdk.models.bamboo_auth_params_dto.BambooAuthParamsDTO(
                        access_key = '', 
                        tenant_domain_name = '', ), 
                    greenhouse_auth_params = visier_platform_sdk.models.greenhouse_auth_params_dto.GreenhouseAuthParamsDTO(
                        api_key = '', ), 
                    google_sheets_auth_params = visier_platform_sdk.models.google_sheets_auth_params_dto.GoogleSheetsAuthParamsDTO(
                        auth_code = '', 
                        configuration = '', 
                        client_id = '', 
                        client_secret = '', ), 
                    jira_auth_params = visier_platform_sdk.models.jira_auth_params_dto.JiraAuthParamsDTO(
                        api_token = '', 
                        host_name = '', 
                        connect_params = visier_platform_sdk.models.jira_connect_params_dto.JiraConnectParamsDTO(
                            app_key = '', 
                            client_key = '', 
                            shared_secret = '', ), ), 
                    lever_auth_params = visier_platform_sdk.models.lever_auth_params_dto.LeverAuthParamsDTO(
                        api_key = '', ), 
                    namely_auth_params = visier_platform_sdk.models.namely_auth_params_dto.NamelyAuthParamsDTO(
                        auth_code = '', ), 
                    qualtrics_auth_params = visier_platform_sdk.models.qualtrics_auth_params_dto.QualtricsAuthParamsDTO(
                        api_token = '', 
                        data_center_id = '', ), 
                    salesforce_auth_params = visier_platform_sdk.models.salesforce_auth_params_dto.SalesforceAuthParamsDTO(
                        refresh_token = '', 
                        client_id = '', ), 
                    ultimate_auth_params = visier_platform_sdk.models.ultimate_auth_params_dto.UltimateAuthParamsDTO(
                        host_domain_name = '', 
                        api_key = '', 
                        username = '', 
                        password = '', 
                        user_access_key = '', ), 
                    workday_auth_params = visier_platform_sdk.models.workday_auth_params_dto.WorkdayAuthParamsDTO(
                        user_id = '', 
                        domain_name = '', 
                        implementation_name = '', 
                        password = '', 
                        o_auth = visier_platform_sdk.models.workday_o_auth_params_dto.WorkdayOAuthParamsDTO(
                            api_client_id = '', 
                            public_x509_cert = '', 
                            private_x509_key = '', ), 
                        ref_token = visier_platform_sdk.models.workday_refresh_token_params_dto.WorkdayRefreshTokenParamsDTO(
                            api_client_id = '', 
                            client_secret = '', 
                            refresh_token = '', ), 
                        integration_system_id = '', 
                        additional_header_params = [
                            visier_platform_sdk.models.pair_dto.PairDTO(
                                key = '', 
                                value = '', )
                            ], ), 
                    icims_auth_params = visier_platform_sdk.models.icims_auth_params_dto.IcimsAuthParamsDTO(
                        customer_id = '', 
                        username = '', 
                        password = '', 
                        client_id = '', 
                        client_secret = '', 
                        region = 'US', ), 
                    service_now_auth_params = visier_platform_sdk.models.service_now_auth_params_dto.ServiceNowAuthParamsDTO(
                        host_domain_name = '', 
                        username = '', 
                        password = '', ), 
                    jdbc_auth_params = visier_platform_sdk.models.jdbc_auth_params_dto.JdbcAuthParamsDTO(
                        jdbc_connect_string = '', 
                        username = '', 
                        password = '', ), 
                    s3_auth_params = visier_platform_sdk.models.basic_s3_auth_params_dto.BasicS3AuthParamsDTO(
                        bucket_name = '', 
                        bucket_region = '', 
                        access_key = '', 
                        secret_key = '', 
                        path = '', ), 
                    internal_s3_auth_params = visier_platform_sdk.models.internal_s3_auth_params_dto.InternalS3AuthParamsDTO(
                        bucket_name = '', 
                        path = '', ), 
                    copy_s3_auth_params = visier_platform_sdk.models.copy_s3_auth_params_dto.CopyS3AuthParamsDTO(
                        iam_role = '', ), 
                    redshift_auth_params = visier_platform_sdk.models.redshift_auth_params_dto.RedshiftAuthParamsDTO(
                        endpoint = '', 
                        port = '', 
                        database = '', 
                        username = '', 
                        password = '', 
                        table_prefix = '', 
                        schema = '', ), 
                    snowflake_auth_params = visier_platform_sdk.models.snowflake_auth_params_dto.SnowflakeAuthParamsDTO(
                        account_identifier = '', 
                        database = '', 
                        schema = '', 
                        username = '', 
                        password = '', 
                        warehouse = '', 
                        private_key = '', ), 
                    big_query_auth_params = visier_platform_sdk.models.big_query_auth_params_dto.BigQueryAuthParamsDTO(
                        project_id = '', 
                        dataset_location = '', 
                        refresh_token = '', 
                        client_id = '', 
                        client_secret = '', 
                        default_dataset = '', 
                        service_account_params = visier_platform_sdk.models.big_query_service_account_params_dto.BigQueryServiceAccountParamsDTO(
                            service_account_email = '', 
                            private_key = '', ), ), 
                    sql_server_auth_params = visier_platform_sdk.models.sql_server_auth_params_dto.SqlServerAuthParamsDTO(
                        host = '', 
                        port = '', 
                        username = '', 
                        password = '', 
                        database = '', ), 
                    dimensions_auth_params = visier_platform_sdk.models.dimensions_auth_params_dto.DimensionsAuthParamsDTO(
                        app_key = '', 
                        client_id = '', 
                        client_secret = '', 
                        vanity_url = '', 
                        username = '', 
                        password = '', ), 
                    willow_auth_params = visier_platform_sdk.models.willow_auth_params_dto.WillowAuthParamsDTO(
                        api_token = '', 
                        host_name = '', ), 
                    empty_auth_params = visier_platform_sdk.models.empty_auth_params_dto.EmptyAuthParamsDTO(), 
                    success_factors_auth_params = visier_platform_sdk.models.success_factors_auth_params_dto.SuccessFactorsAuthParamsDTO(
                        host_domain_name = '', 
                        company_id = '', 
                        username = '', 
                        password = '', ), 
                    fusion_auth_params = visier_platform_sdk.models.fusion_auth_params_dto.FusionAuthParamsDTO(
                        username = '', 
                        password = '', 
                        host_domain_name = '', ), 
                    adp_auth_params = visier_platform_sdk.models.adp_auth_params_dto.AdpAuthParamsDTO(
                        auth_code = '', ), 
                    medallia_auth_params = visier_platform_sdk.models.medallia_auth_params_dto.MedalliaAuthParamsDTO(
                        tenant_domain_name = '', 
                        instance_url = '', 
                        client_id = '', 
                        client_secret = '', ), 
                    salesforce_v2_auth_params = visier_platform_sdk.models.salesforce_v2_auth_params_dto.SalesforceV2AuthParamsDTO(
                        auth_code = '', 
                        client_id = '', 
                        client_secret = '', 
                        login_host = '', ), 
                    gong_auth_params = visier_platform_sdk.models.gong_auth_params_dto.GongAuthParamsDTO(
                        client_id = '', 
                        client_secret = '', ), 
                    zoom_auth_params = visier_platform_sdk.models.zoom_auth_params_dto.ZoomAuthParamsDTO(
                        auth_code = '', 
                        client_id = '', 
                        client_secret = '', ), 
                    dayforce_v2_auth_params = visier_platform_sdk.models.dayforce_v2_auth_params_dto.DayforceV2AuthParamsDTO(
                        username = '', 
                        password = '', 
                        company_id = '', 
                        token_host = '', 
                        host_domain_name = '', ), 
                    slack_auth_params = visier_platform_sdk.models.slack_auth_params_dto.SlackAuthParamsDTO(
                        auth_code = '', 
                        client_id = '', 
                        client_secret = '', ), 
                    my_sql_auth_params = visier_platform_sdk.models.my_sql_auth_params_dto.MySqlAuthParamsDTO(
                        host = '', 
                        port = '', 
                        username = '', 
                        password = '', 
                        database = '', 
                        ssl_mode = '', ), 
                    workday_raas_auth_params = visier_platform_sdk.models.workday_raas_auth_params_dto.WorkdayRaasAuthParamsDTO(
                        user_id = '', 
                        domain_name = '', 
                        implementation_name = '', 
                        password = '', 
                        test_report_url = '', ), 
                    ms365_auth_params = visier_platform_sdk.models.microsoft365_auth_params_dto.Microsoft365AuthParamsDTO(
                        o_auth_tenant_id = '', 
                        client_id = '', 
                        client_secret = '', 
                        privacy_mode = '', ), 
                    google_workspace_auth_params = visier_platform_sdk.models.google_workspace_auth_params_dto.GoogleWorkspaceAuthParamsDTO(
                        auth_code = '', 
                        client_id = '', 
                        client_secret = '', 
                        service_account = '', 
                        privacy_mode = '', ), 
                    oracle_db_auth_params = visier_platform_sdk.models.oracle_db_auth_params_dto.OracleDbAuthParamsDTO(
                        host = '', 
                        port = '', 
                        username = '', 
                        password = '', 
                        service_name = '', ), 
                    service_now_v2_auth_params = visier_platform_sdk.models.service_now_v2_auth_params_dto.ServiceNowV2AuthParamsDTO(
                        host_domain_name = '', 
                        client_id = '', 
                        client_secret = '', 
                        auth_code = '', 
                        alternate_domain = '', ), 
                    databricks_auth_params = visier_platform_sdk.models.databricks_auth_params_dto.DatabricksAuthParamsDTO(
                        share_credentials_version = '', 
                        bearer_token = '', 
                        endpoint = '', 
                        expiration_time = '', ), 
                    has_updates = True, 
                    auth_context = 'DefaultDataExtraction', ),
                data_provider_basic_information = visier_platform_sdk.models.data_provider_basic_information_dto.DataProviderBasicInformationDTO(
                    display_name = '', 
                    description = '', ),
                data_provider_metadata = visier_platform_sdk.models.data_provider_basic_metadata_dto.DataProviderBasicMetadataDTO(
                    can_children_inherit = True, )
            )
        else:
            return DataProviderAuthInformationDTO(
        )

    def testDataProviderAuthInformationDTO(self):
        """Test DataProviderAuthInformationDTO"""
        def validate_instance(instance):
            DataProviderAuthInformationDTO.model_validate(inst_req_only)
            instance_deserialized = DataProviderAuthInformationDTO.from_dict(instance.to_dict())
            assert instance == instance_deserialized

        inst_req_only = self.make_instance(include_optional=False)
        validate_instance(inst_req_only)

        inst_req_and_optional = self.make_instance(include_optional=True)
        validate_instance(inst_req_and_optional)

if __name__ == '__main__':
    unittest.main()
