# coding: utf-8

"""
    API Reference

    Detailed API reference documentation for Visier APIs. Includes all endpoints, headers, path parameters, query parameters, request body schema, response schema, JSON request samples, and JSON response samples.

    The version of the OpenAPI document: 22222222.99201.1914
    Contact: alpine@visier.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from visier_platform_sdk.models.authentication_o_auth2_user_tenant_details_dto import AuthenticationOAuth2UserTenantDetailsDTO

class TestAuthenticationOAuth2UserTenantDetailsDTO(unittest.TestCase):
    """AuthenticationOAuth2UserTenantDetailsDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AuthenticationOAuth2UserTenantDetailsDTO:
        """Test AuthenticationOAuth2UserTenantDetailsDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AuthenticationOAuth2UserTenantDetailsDTO`
        """
        model = AuthenticationOAuth2UserTenantDetailsDTO()
        if include_optional:
            return AuthenticationOAuth2UserTenantDetailsDTO(
                details = [
                    visier_platform_sdk.models.authentication/o_auth2_user_tenant_detail_dto.authentication.OAuth2UserTenantDetailDTO(
                        tenant_code = '', 
                        display_name = '', 
                        properties = None, )
                    ]
            )
        else:
            return AuthenticationOAuth2UserTenantDetailsDTO(
        )
        """

    def testAuthenticationOAuth2UserTenantDetailsDTO(self):
        """Test AuthenticationOAuth2UserTenantDetailsDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
