# coding: utf-8

"""
    API Reference

    Detailed API reference documentation for Visier APIs. Includes all endpoints, headers, path parameters, query parameters, request body schema, response schema, JSON request samples, and JSON response samples.

    The version of the OpenAPI document: 22222222.99201.2047
    Contact: alpine@visier.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

import visier_platform_sdk.models
from visier_platform_sdk.models.property_access_config_dto import PropertyAccessConfigDTO

class TestPropertyAccessConfigDTO(unittest.TestCase):
    """PropertyAccessConfigDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PropertyAccessConfigDTO:
        """Test PropertyAccessConfigDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """

        if include_optional:
            return PropertyAccessConfigDTO(
                property_id = '',
                analytic_object_id = '',
                analytic_object_reference_paths = [
                    ''
                    ],
                access_level = 'None',
                property_status = 'Unset'
            )
        else:
            return PropertyAccessConfigDTO(
        )

    def testPropertyAccessConfigDTO(self):
        """Test PropertyAccessConfigDTO"""
        def validate_instance(instance):
            PropertyAccessConfigDTO.model_validate(inst_req_only)
            instance_deserialized = PropertyAccessConfigDTO.from_dict(instance.to_dict())
            assert instance == instance_deserialized

        inst_req_only = self.make_instance(include_optional=False)
        validate_instance(inst_req_only)

        inst_req_and_optional = self.make_instance(include_optional=True)
        validate_instance(inst_req_and_optional)

if __name__ == '__main__':
    unittest.main()
