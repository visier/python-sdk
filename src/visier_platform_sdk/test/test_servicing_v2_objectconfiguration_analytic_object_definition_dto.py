# coding: utf-8

"""
    API Reference

    Detailed API reference documentation for Visier APIs. Includes all endpoints, headers, path parameters, query parameters, request body schema, response schema, JSON request samples, and JSON response samples.

    The version of the OpenAPI document: 22222222.99201.1906
    Contact: alpine@visier.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from visier_platform_sdk.models.servicing_v2_objectconfiguration_analytic_object_definition_dto import ServicingV2ObjectconfigurationAnalyticObjectDefinitionDTO

class TestServicingV2ObjectconfigurationAnalyticObjectDefinitionDTO(unittest.TestCase):
    """ServicingV2ObjectconfigurationAnalyticObjectDefinitionDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ServicingV2ObjectconfigurationAnalyticObjectDefinitionDTO:
        """Test ServicingV2ObjectconfigurationAnalyticObjectDefinitionDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ServicingV2ObjectconfigurationAnalyticObjectDefinitionDTO`
        """
        model = ServicingV2ObjectconfigurationAnalyticObjectDefinitionDTO()
        if include_optional:
            return ServicingV2ObjectconfigurationAnalyticObjectDefinitionDTO(
                uuid = '',
                object_name = '',
                update_operation = 'unspecified'
            )
        else:
            return ServicingV2ObjectconfigurationAnalyticObjectDefinitionDTO(
        )
        """

    def testServicingV2ObjectconfigurationAnalyticObjectDefinitionDTO(self):
        """Test ServicingV2ObjectconfigurationAnalyticObjectDefinitionDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
