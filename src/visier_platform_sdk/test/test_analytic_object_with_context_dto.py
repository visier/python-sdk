# coding: utf-8

"""
    API Reference

    Detailed API reference documentation for Visier APIs. Includes all endpoints, headers, path parameters, query parameters, request body schema, response schema, JSON request samples, and JSON response samples.

    The version of the OpenAPI document: 22222222.99201.2046
    Contact: alpine@visier.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

import visier_platform_sdk.models
from visier_platform_sdk.models.analytic_object_with_context_dto import AnalyticObjectWithContextDTO

class TestAnalyticObjectWithContextDTO(unittest.TestCase):
    """AnalyticObjectWithContextDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AnalyticObjectWithContextDTO:
        """Test AnalyticObjectWithContextDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """

        if include_optional:
            return AnalyticObjectWithContextDTO(
                execution_context = visier_platform_sdk.models.execution_context_dto.ExecutionContextDTO(
                    tenant_code = '', 
                    project_id = '', ),
                analytic_object = visier_platform_sdk.models.analytic_object_definition_dto.AnalyticObjectDefinitionDTO(
                    uuid = '', 
                    object_name = '', 
                    update_operation = 'unspecified', 
                    basic_information = None, 
                    details = None, 
                    tag_list = None, 
                    version_information = None, )
            )
        else:
            return AnalyticObjectWithContextDTO(
        )

    def testAnalyticObjectWithContextDTO(self):
        """Test AnalyticObjectWithContextDTO"""
        def validate_instance(instance):
            AnalyticObjectWithContextDTO.model_validate(inst_req_only)
            instance_deserialized = AnalyticObjectWithContextDTO.from_dict(instance.to_dict())
            assert instance == instance_deserialized

        inst_req_only = self.make_instance(include_optional=False)
        validate_instance(inst_req_only)

        inst_req_and_optional = self.make_instance(include_optional=True)
        validate_instance(inst_req_and_optional)

if __name__ == '__main__':
    unittest.main()
