# coding: utf-8

"""
    API Reference

    Detailed API reference documentation for Visier APIs. Includes all endpoints, headers, path parameters, query parameters, request body schema, response schema, JSON request samples, and JSON response samples.

    The version of the OpenAPI document: 22222222.99201.1892
    Contact: alpine@visier.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from visier_platform_sdk.models.dataservices_query_cell_set_or_error_dto import DataservicesQueryCellSetOrErrorDTO

class TestDataservicesQueryCellSetOrErrorDTO(unittest.TestCase):
    """DataservicesQueryCellSetOrErrorDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DataservicesQueryCellSetOrErrorDTO:
        """Test DataservicesQueryCellSetOrErrorDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DataservicesQueryCellSetOrErrorDTO`
        """
        model = DataservicesQueryCellSetOrErrorDTO()
        if include_optional:
            return DataservicesQueryCellSetOrErrorDTO(
                cell_set = visier_platform_sdk.models.dataservices/query/cell_set_dto.dataservices.query.CellSetDTO(
                    cells = [
                        visier_platform_sdk.models.dataservices/query/cell_dto.dataservices.query.CellDTO(
                            value = '', 
                            support = '', 
                            coordinates = [
                                56
                                ], 
                            distribution = [
                                visier_platform_sdk.models.dataservices/query/cell_distribution_bin_dto.dataservices.query.CellDistributionBinDTO(
                                    value = '', 
                                    support = '', )
                                ], )
                        ], 
                    axes = [
                        visier_platform_sdk.models.dataservices/query/cell_set_axis_dto.dataservices.query.CellSetAxisDTO(
                            dimension = None, 
                            positions = [
                                visier_platform_sdk.models.dataservices/query/cell_set_axis_position_dto.dataservices.query.CellSetAxisPositionDTO(
                                    path = [
                                        ''
                                        ], 
                                    display_name = '', 
                                    display_name_path = [
                                        ''
                                        ], )
                                ], )
                        ], 
                    lineage = None, ),
                error = visier_platform_sdk.models.dataservices/query/query_execution_error_dto.dataservices.query.QueryExecutionErrorDTO(
                    error_code = '', 
                    message = '', 
                    all_errors = [
                        visier_platform_sdk.models.dataservices/query/query_execution_errors_dto.dataservices.query.QueryExecutionErrorsDTO(
                            error_code = '', 
                            message = '', 
                            all_error_details = [
                                visier_platform_sdk.models.dataservices/query/query_execution_error_details_dto.dataservices.query.QueryExecutionErrorDetailsDTO(
                                    object_type = '', 
                                    query_index = 56, 
                                    column_index = 56, 
                                    error = '', )
                                ], )
                        ], )
            )
        else:
            return DataservicesQueryCellSetOrErrorDTO(
        )
        """

    def testDataservicesQueryCellSetOrErrorDTO(self):
        """Test DataservicesQueryCellSetOrErrorDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
