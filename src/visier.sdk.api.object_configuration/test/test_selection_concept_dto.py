# coding: utf-8

"""
    Visier Object Configuration APIs

    Visier APIs for managing objects in studio experience

    The version of the OpenAPI document: 22222222.99201.1411
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from visier.sdk.api.object_configuration.models.selection_concept_dto import SelectionConceptDTO

class TestSelectionConceptDTO(unittest.TestCase):
    """SelectionConceptDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SelectionConceptDTO:
        """Test SelectionConceptDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SelectionConceptDTO`
        """
        model = SelectionConceptDTO()
        if include_optional:
            return SelectionConceptDTO(
                configuration = visier.sdk.api.object_configuration.models.selection_concept_configuration_dto.SelectionConceptConfigurationDTO(
                    analytic_object_filters = [
                        visier.sdk.api.object_configuration.models.analytic_object_filter_dto.AnalyticObjectFilterDTO(
                            analytic_object_uuid = '', 
                            dimensions = [
                                visier.sdk.api.object_configuration.models.dimension_filter_dto.DimensionFilterDTO(
                                    dimension_id = '', 
                                    dimension_members = [
                                        visier.sdk.api.object_configuration.models.dimension_member_dto.DimensionMemberDTO(
                                            dimension_member = [
                                                ''
                                                ], )
                                        ], 
                                    symbol_name = '', )
                                ], 
                            symbol_name = '', )
                        ], ),
                name = '',
                uuid = ''
            )
        else:
            return SelectionConceptDTO(
        )
        """

    def testSelectionConceptDTO(self):
        """Test SelectionConceptDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
