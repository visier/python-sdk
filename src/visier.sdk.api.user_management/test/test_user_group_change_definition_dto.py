# coding: utf-8

"""
    Visier User Management APIs

    Visier APIs for managing users within an organization

    The version of the OpenAPI document: 22222222.99201.1411
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from visier.sdk.api.user_management.models.user_group_change_definition_dto import UserGroupChangeDefinitionDTO

class TestUserGroupChangeDefinitionDTO(unittest.TestCase):
    """UserGroupChangeDefinitionDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UserGroupChangeDefinitionDTO:
        """Test UserGroupChangeDefinitionDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UserGroupChangeDefinitionDTO`
        """
        model = UserGroupChangeDefinitionDTO()
        if include_optional:
            return UserGroupChangeDefinitionDTO(
                description = '',
                display_name = '',
                permission_ids = visier.sdk.api.user_management.models.element_ids_dto.ElementIDsDTO(
                    ids = [
                        ''
                        ], ),
                project_id = '',
                tenant_code = '',
                user_group_id = '',
                users = visier.sdk.api.user_management.models.user_group_change_users_dto.UserGroupChangeUsersDTO(
                    dynamic_filter_definition = null, 
                    include_all_users = True, 
                    manually_excluded_ids = null, 
                    manually_included_ids = null, )
            )
        else:
            return UserGroupChangeDefinitionDTO(
        )
        """

    def testUserGroupChangeDefinitionDTO(self):
        """Test UserGroupChangeDefinitionDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
