# coding: utf-8

"""
    Visier Data In APIs

    Visier APIs for sending data to Visier and running data load jobs.

    The version of the OpenAPI document: 0.99201.1475
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501
import os
import unittest

from dotenv import load_dotenv
from visier_api_core import Configuration, ApiClient
from visier_api_data_in.api.direct_data_intake_api import DirectDataIntakeApi


class TestDirectDataIntakeApi(unittest.TestCase):
    """DirectDataIntakeApi unit test stubs"""

    def setUp(self) -> None:
        load_dotenv()
        config = Configuration(
            host=os.getenv('VISIER_HOST'),
            api_key=os.getenv('VISIER_APIKEY'),
            username=os.getenv('VISIER_USERNAME'),
            password=os.getenv('VISIER_PASSWORD'),
            client_id=os.getenv('VISIER_CLIENT_ID'),
            client_secret=os.getenv('VISIER_CLIENT_SECRET'),
            redirect_uri=os.getenv('VISIER_REDIRECT_URI'),
            vanity=os.getenv('VISIER_VANITY')
        )
        api_client = ApiClient(config)
        self.api = DirectDataIntakeApi(api_client)

    def tearDown(self) -> None:
        pass

    def test_commit_transaction(self) -> None:
        """Test case for commit_transaction

        Commit a transaction
        """
        pass

    def test_get_config(self) -> None:
        """Test case for get_config

        Get the direct data intake configuration
        """
        pass

    def test_job_status(self) -> None:
        """Test case for job_status

        Check transaction status
        """
        pass

    def test_object_schema(self) -> None:
        """Test case for object_schema

        Retrieve an object's data load schema
        """

        data_schema_dto = self.api.object_schema(draft_id='prod', object_name='Employee')
        assert data_schema_dto is not None
        assert len(data_schema_dto.var_schema)

    def test_put_config(self) -> None:
        """Test case for put_config

        Update the direct data intake configuration
        """
        pass

    def test_rollback_transaction(self) -> None:
        """Test case for rollback_transaction

        Roll back a transaction
        """

        transactions_to_rollback = ['9f895464-ab59-4804-80ea-25ed5a4d9ab1',
                                    'a36f6951-369d-4552-a1fd-6aa9701f2a3b',
                                    '2e3c4bf7-91a7-4913-abe2-9bee0f75a6d3',
                                    'c127ad4e-509c-4a70-9bd6-000ffb108aab',
                                    '1edf2844-c559-486f-9f24-00df3bca291d',
                                    'db739d05-6243-4161-95bc-70c8f9e861e5',
                                    '076c4c75-1e38-4198-84ea-f6fd577af14c']

        for tx_id in transactions_to_rollback:

            rollback = self.api.rollback_transaction_without_preload_content(draft_id='prod', transaction_id=tx_id)
            assert rollback is not None
            print (rollback)

    def test_start_transaction(self) -> None:
        """Test case for start_transaction

        Start a direct data intake transaction
        """
        pass

    def test_upload_file(self) -> None:
        """Test case for upload_file

        Upload files
        """

        file_path = 'data/Employee_EU.csv'
        analytic_object_name = 'Employee'

        transaction_response = self.api.start_transaction(draft_id='prod')
        assert transaction_response is not None
        assert transaction_response.transaction_id is not None

        self.api.put_config(draft_id='prod', configuration=Configuration()
        tx_id = transaction_response.transaction_id

        upload_resp = self.api.upload_file(
            draft_id='prod',
            transaction_id=tx_id,
            object_name=analytic_object_name,
            file=file_path
        )
        assert upload_resp is not None
        assert upload_resp.status == 'SUCCEEDED'
        commit_resp = self.api.commit_transaction(draft_id='prod', transaction_id=tx_id)
        assert commit_resp is not None
        assert commit_resp.status == 'SUCCEEDED'


if __name__ == '__main__':
    unittest.main()
